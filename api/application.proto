syntax = "proto3";

package api;

// for grpc-gateway
import "google/api/annotations.proto";

// Application is the service managing applications.
service Application {
	// Create creates the given application.
	rpc Create(CreateApplicationRequest) returns (CreateApplicationResponse) {
		option(google.api.http) = {
			post: "/api/applications"
			body: "*"
		};
	}

	// Get returns the requested application.
	rpc Get(GetApplicationRequest) returns (GetApplicationResponse) {
		option(google.api.http) = {
			get: "/api/applications/{id}"
		};
	}

	// Update updates the given application.
	rpc Update(UpdateApplicationRequest) returns (UpdateApplicationResponse) {
		option(google.api.http) = {
			put: "/api/applications/{id}"
			body: "*"
		};
	}

	// Delete deletes the given application.
	rpc Delete(DeleteApplicationRequest) returns (DeleteApplicationResponse) {
		option(google.api.http) = {
			delete: "/api/applications/{id}"
		};
	}

	// List lists the available applications.
	rpc List(ListApplicationRequest) returns (ListApplicationResponse) {
		option(google.api.http) = {
			get: "/api/applications"
		};
	}

	// CreateHTTPIntegration creates a HTTP application-integration.
	rpc CreateHTTPIntegration(HTTPIntegration) returns (EmptyResponse) {
		option(google.api.http) = {
			post: "/api/applications/{id}/integrations/http"
			body: "*"
		};
	}

	// GetHTTPIntegration returns the HTTP application-integration.
	rpc GetHTTPIntegration(GetHTTPIntegrationRequest) returns (HTTPIntegration) {
		option(google.api.http) = {
			get: "/api/applications/{id}/integrations/http"
		};
	}

	// UpdateHTTPIntegration updates the HTTP application-integration.
	rpc UpdateHTTPIntegration(HTTPIntegration) returns (EmptyResponse) {
		option(google.api.http) = {
			put: "/api/applications/{id}/integrations/http"
			body: "*"
		};
	}

	// DeleteIntegration deletes the HTTP application-integration.
	rpc DeleteHTTPIntegration(DeleteHTTPIntegrationRequest) returns (EmptyResponse) {
		option(google.api.http) = {
			delete: "/api/applications/{id}/integrations/http"
		};
	}

	// CreateInfluxDBIntegration create an InfluxDB application-integration.
	rpc CreateInfluxDBIntegration(CreateInfluxDBIntegrationRequest) returns (EmptyResponse) {
		option(google.api.http) = {
			post: "/api/applications/{application_id}/integrations/influxdb"
			body: "*"
		};
	}

	// GetInfluxDBIntegration returns the InfluxDB application-integration.
	rpc GetInfluxDBIntegration(GetInfluxDBIntegrationRequest) returns (GetInfluxDBIntegrationResponse) {
		option(google.api.http) = {
			get: "/api/applications/{application_id}/integrations/influxdb"
		};
	}

	// UpdateInfluxDBIntegration updates the InfluxDB application-integration.
	rpc UpdateInfluxDBIntegration(UpdateInfluxDBIntegrationRequest) returns (EmptyResponse) {
		option(google.api.http) = {
			put: "/api/applications/{application_id}/integrations/influxdb"
			body: "*"
		};
	}

	// DeleteInfluxDBIntegration deletes the InfluxDB application-integration.
	rpc DeleteInfluxDBIntegration(DeleteInfluxDBIntegrationRequest) returns (EmptyResponse) {
		option(google.api.http) = {
			delete: "/api/applications/{application_id}/integrations/influxdb"
		};
	}

	// ListIntegrations lists all configured integrations.
	rpc ListIntegrations(ListIntegrationRequest) returns (ListIntegrationResponse) {
		option(google.api.http) = {
			get: "/api/applications/{id}/integrations"
		};
	}
}

enum IntegrationKind {
	HTTP = 0;
	INFLUXDB = 1;
}

message CreateApplicationRequest {
	// Name of the application (must be unique).
	string name = 1;

	// Description of the application.
	string description = 2;

	// ID of the organization to which the application belongs.
	int64 organizationID = 14;

	// ID of the service profile.
	string serviceProfileID = 15;

	// Payload codec.
	string payloadCodec = 16;

	// Payload encoder script.
	string payloadEncoderScript = 17;

	// Payload decoder script.
	string payloadDecoderScript = 18;
}

message CreateApplicationResponse {
	// ID of the application that was created.
	int64 id = 1;
}

message GetApplicationRequest {
	// Name of the application.
	int64 id = 1;
}

message GetApplicationResponse {
	// ID of the application.
	int64 id = 1;

	// Name of the application.
	string name = 2;

	// Description of the application.
	string description = 3;

	// ID of the organization to which the application belongs.
	int64 organizationID = 14;

	// ID of the service profile.
	string serviceProfileID = 15;

	// Payload codec.
	string payloadCodec = 16;

	// Payload encoder script.
	string payloadEncoderScript = 17;

	// Payload decoder script.
	string payloadDecoderScript = 18;
}

message UpdateApplicationRequest {
	// ID of the application to update.
	int64 id = 1;

	// Name of the application (must be unique).
	string name = 2;

	// Description of the application.
	string description = 3;

	// ID of the service profile.
	string serviceProfileID = 15;

	// Payload codec.
	string payloadCodec = 16;

	// Payload encoder script.
	string payloadEncoderScript = 17;

	// Payload decoder script.
	string payloadDecoderScript = 18;
}

message UpdateApplicationResponse {}

message DeleteApplicationRequest {
	// ID of the application.
	int64 id = 1;
}

message DeleteApplicationResponse {}

message ListApplicationRequest {
	// Max number of applications to return in the result-test.
	int64 limit = 1;

	// Offset in the result-set (for pagination).
	int64 offset = 2;

	// ID of the organization to filter on.
	int64 organizationID = 3;

	// Search on name (optional).
	string search = 4;
}

message ApplicationListItem {
	// ID of the application.
	int64 id = 1;

	// Name of the application.
	string name = 2;

	// Description of the application.
	string description = 3;

	// ID of the organization to which the application belongs.
	int64 organizationID = 14;

	// ID of the service profile.
	string serviceProfileID = 15;

	// Service-profile name.
	string serviceProfileName = 16;
}

message ListApplicationResponse {
	// Total number of applications available within the result-set.
	int64 totalCount = 1;
	
	// Applications within this result-set.
	repeated ApplicationListItem result = 2;
}

message EmptyResponse {}

message HTTPIntegrationHeader {
	// Key
	string key = 1;

	// Value
	string value = 2;
}

message HTTPIntegration {
	// The id of the application.
	int64 id = 1;

	// The headers to use when making HTTP callbacks.
	repeated HTTPIntegrationHeader headers = 2;

	// The URL to call for uplink data.
	string dataUpURL = 3;

	// The URL to call for join notifications.
	string joinNotificationURL = 4;

	// The URL to call for ACK notifications (for confirmed downlink data).
	string ackNotificationURL = 5;

	// The URL to call for error notifications.
	string errorNotificationURL = 6;
}

message GetHTTPIntegrationRequest {
	// The id of the application.
	int64 id = 1;
}

message DeleteHTTPIntegrationRequest {
	// The id of the application.
	int64 id = 1;
}

message ListIntegrationRequest {
	// The id of the application.
	int64 id = 1;
}

message ListIntegrationResponse {
	// The integration kinds associated with the application.
	repeated IntegrationKind kinds = 1;
}

enum InfluxDBPrecision {
	NS = 0;
	U = 1;
	MS = 2;
	S = 3;
	M = 4;
	H = 5;
}

message InfluxDBIntegrationConfiguration {
	// InfluxDB API write endpoint (e.g. http://localhost:8086/write).
	string endpoint = 1;

	// InfluxDB database name.
	string db = 2;

	// InfluxDB username.
	string username = 3;

	// InfluxDB password.
	string password = 4;

	// InfluxDB retention policy name.
	string retention_policy_name = 5;

	// InfluxDB timestamp precision.
	InfluxDBPrecision precision = 6;
}

message CreateInfluxDBIntegrationRequest {
	// Application ID to create the integration for.
	int64 application_id = 1;

	// Integration configuration.
	InfluxDBIntegrationConfiguration configuration = 2;
}

message GetInfluxDBIntegrationRequest {
	// Application ID to get the integration for.
	int64 application_id = 2;
}

message GetInfluxDBIntegrationResponse {
	// Integration configuration.
	InfluxDBIntegrationConfiguration configuration = 1;
}

message UpdateInfluxDBIntegrationRequest {
	// Application ID to update the integration for.
	int64 application_id = 1;

	// Integration configuration.
	InfluxDBIntegrationConfiguration configuration = 2;
}

message DeleteInfluxDBIntegrationRequest {
	// Application ID to delete the integration for.
	int64 application_id = 1;
}