syntax = "proto3";

package api;

// for grpc-gateway
import "google/api/annotations.proto";
import "common.proto";

// NodeSession is the service managing node-sessions.
service NodeSession {
    // Create creates the given node-session. The DevAddr must contain the same NwkID as the configured NetID. Node-sessions will expire automatically after the configured TTL.
    rpc Create(CreateNodeSessionRequest) returns (CreateNodeSessionResponse) {
        option (google.api.http) = {
            post: "/api/applications/{applicationName}/nodes/{nodeName}/session"
            body: "*"
        };
    }

    // Get returns the node-session matching the given node.
    rpc Get(GetNodeSessionRequest) returns (GetNodeSessionResponse) {
        option (google.api.http) = {
            get: "/api/applications/{applicationName}/nodes/{nodeName}/session"
        };
    }

    // Update updates the given node-session.
    rpc Update(UpdateNodeSessionRequest) returns (UpdateNodeSessionResponse) {
        option (google.api.http) = {
            put: "/api/applications/{applicationName}/nodes/{nodeName}/session"
            body: "*"
        };
    }

    // Delete deletes the node-session matching the given node.
    rpc Delete(DeleteNodeSessionRequest) returns (DeleteNodeSessionResponse) {
        option (google.api.http) = {
            delete: "/api/applications/{applicationName}/nodes/{nodeName}/session"
        };
    }

    // GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
    rpc GetRandomDevAddr(GetRandomDevAddrRequest) returns (GetRandomDevAddrResponse) {
        option (google.api.http) = {
            post: "/api/applications/{applicationName}/nodes/{nodeName}/getRandomDevAddr"
        };
    }
}

message CreateNodeSessionRequest {
    // hex encoded DevAddr
    string devAddr = 1;
    // name of the application to which the node is linked
    string applicationName = 2;
    // name of the node
    string nodeName = 3;
    // hex encoded AppSKey
    string appSKey = 4;
    // hex encoded NwkSKey
    string nwkSKey = 5;
    uint32 fCntUp = 6;
    uint32 fCntDown = 7;
    uint32 rxDelay = 8;
    uint32 rx1DROffset = 9;
    repeated uint32 cFList = 10;
    RXWindow rxWindow = 11;
    uint32 rx2DR = 12;
	bool relaxFCnt = 13;
	uint32 adrInterval = 14;
	double installationMargin = 15;
}

message CreateNodeSessionResponse {}

message GetNodeSessionRequest {
    // name of the node
    string nodeName = 1;
    // name of the application to which the node is linked
    string applicationName = 2;
}

message GetNodeSessionResponse {
    // hex encoded DevAddr
    string devAddr = 1;
    // hex encoded AppEUI
    string appEUI = 2;
    // hex encoded DevEUI
    string devEUI = 3;
    // hex encoded AppSKey
    string appSKey = 4;
    // hex encoded NwkSKey
    string nwkSKey = 5;
    uint32 fCntUp = 6;
    uint32 fCntDown = 7;
    uint32 rxDelay = 8;
    uint32 rx1DROffset = 9;
    repeated uint32 cFList = 10;
    RXWindow rxWindow = 11;
    uint32 rx2DR = 12;
	bool relaxFCnt = 13;
	uint32 adrInterval = 14;
	double installationMargin = 15;
	uint32 nbTrans = 16;
	uint32 txPower = 17;
}

message UpdateNodeSessionRequest {
    // hex encoded DevAddr
    string devAddr = 1;
    // name of the application to which the node is linked
    string applicationName = 2;
    // name of the node
    string nodeName = 3;
    // hex encoded AppSKey
    string appSKey = 4;
    // hex encoded NwkSKey
    string nwkSKey = 5;
    uint32 fCntUp = 6;
    uint32 fCntDown = 7;
    uint32 rxDelay = 8;
    uint32 rx1DROffset = 9;
    repeated uint32 cFList = 10;
    RXWindow rxWindow = 11;
    uint32 rx2DR = 12;
	bool relaxFCnt = 13;
	uint32 adrInterval = 14;
	double installationMargin = 15;
}

message UpdateNodeSessionResponse {}

message DeleteNodeSessionRequest {
    // name of the node
    string nodeName = 1;
    // name of the application to which the node is linked
    string applicationName = 2;
}

message DeleteNodeSessionResponse {}

message GetRandomDevAddrRequest {
    // name of the node
    string nodeName = 1;
    // name of the application to which the node is linked
    string applicationName = 2;
}

message GetRandomDevAddrResponse {
    // hex encoded DevAddr
    string devAddr = 1;
}
