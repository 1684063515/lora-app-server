// Code generated by protoc-gen-go.
// source: queue.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnqueueItemRequest struct {
	// hex encoded DevEUI
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// requires an ack from the node
	Confirmed bool `protobuf:"varint,2,opt,name=confirmed" json:"confirmed,omitempty"`
	// FPort to be used
	FPort uint32 `protobuf:"varint,3,opt,name=fPort" json:"fPort,omitempty"`
	// base64 encoded data
	Data string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *EnqueueItemRequest) Reset()                    { *m = EnqueueItemRequest{} }
func (m *EnqueueItemRequest) String() string            { return proto.CompactTextString(m) }
func (*EnqueueItemRequest) ProtoMessage()               {}
func (*EnqueueItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type EnqueueItemResponse struct {
}

func (m *EnqueueItemResponse) Reset()                    { *m = EnqueueItemResponse{} }
func (m *EnqueueItemResponse) String() string            { return proto.CompactTextString(m) }
func (*EnqueueItemResponse) ProtoMessage()               {}
func (*EnqueueItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type DeleteQueueItemRequest struct {
	// ID of the queue item
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteQueueItemRequest) Reset()                    { *m = DeleteQueueItemRequest{} }
func (m *DeleteQueueItemRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteQueueItemRequest) ProtoMessage()               {}
func (*DeleteQueueItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type DeleteQueueItemResponse struct {
}

func (m *DeleteQueueItemResponse) Reset()                    { *m = DeleteQueueItemResponse{} }
func (m *DeleteQueueItemResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteQueueItemResponse) ProtoMessage()               {}
func (*DeleteQueueItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type QueueItem struct {
	// id of the queue item
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// hex encoded DevEUI
	DevEUI string `protobuf:"bytes,2,opt,name=devEUI" json:"devEUI,omitempty"`
	// requires an ack from the node
	Confirmed bool `protobuf:"varint,3,opt,name=confirmed" json:"confirmed,omitempty"`
	// the transmission is pending (waiting for an ack)
	Pending bool `protobuf:"varint,4,opt,name=pending" json:"pending,omitempty"`
	// FPort to be used
	FPort uint32 `protobuf:"varint,5,opt,name=fPort" json:"fPort,omitempty"`
	// base64 encoded data
	Data string `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
}

func (m *QueueItem) Reset()                    { *m = QueueItem{} }
func (m *QueueItem) String() string            { return proto.CompactTextString(m) }
func (*QueueItem) ProtoMessage()               {}
func (*QueueItem) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type ListQueueItemsRequest struct {
	// hex encoded DevEUI
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *ListQueueItemsRequest) Reset()                    { *m = ListQueueItemsRequest{} }
func (m *ListQueueItemsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListQueueItemsRequest) ProtoMessage()               {}
func (*ListQueueItemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type ListQueueItemsResponse struct {
	Items []*QueueItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListQueueItemsResponse) Reset()                    { *m = ListQueueItemsResponse{} }
func (m *ListQueueItemsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListQueueItemsResponse) ProtoMessage()               {}
func (*ListQueueItemsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *ListQueueItemsResponse) GetItems() []*QueueItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*EnqueueItemRequest)(nil), "api.EnqueueItemRequest")
	proto.RegisterType((*EnqueueItemResponse)(nil), "api.EnqueueItemResponse")
	proto.RegisterType((*DeleteQueueItemRequest)(nil), "api.DeleteQueueItemRequest")
	proto.RegisterType((*DeleteQueueItemResponse)(nil), "api.DeleteQueueItemResponse")
	proto.RegisterType((*QueueItem)(nil), "api.QueueItem")
	proto.RegisterType((*ListQueueItemsRequest)(nil), "api.ListQueueItemsRequest")
	proto.RegisterType((*ListQueueItemsResponse)(nil), "api.ListQueueItemsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Queue service

type QueueClient interface {
	// Enqueue adds the given payload to the queue.
	Enqueue(ctx context.Context, in *EnqueueItemRequest, opts ...grpc.CallOption) (*EnqueueItemResponse, error)
	// Delete deletes an item from the queue.
	Delete(ctx context.Context, in *DeleteQueueItemRequest, opts ...grpc.CallOption) (*DeleteQueueItemResponse, error)
	// List lists the items in the queue for the given devEUI.
	List(ctx context.Context, in *ListQueueItemsRequest, opts ...grpc.CallOption) (*ListQueueItemsResponse, error)
}

type queueClient struct {
	cc *grpc.ClientConn
}

func NewQueueClient(cc *grpc.ClientConn) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) Enqueue(ctx context.Context, in *EnqueueItemRequest, opts ...grpc.CallOption) (*EnqueueItemResponse, error) {
	out := new(EnqueueItemResponse)
	err := grpc.Invoke(ctx, "/api.Queue/Enqueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Delete(ctx context.Context, in *DeleteQueueItemRequest, opts ...grpc.CallOption) (*DeleteQueueItemResponse, error) {
	out := new(DeleteQueueItemResponse)
	err := grpc.Invoke(ctx, "/api.Queue/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) List(ctx context.Context, in *ListQueueItemsRequest, opts ...grpc.CallOption) (*ListQueueItemsResponse, error) {
	out := new(ListQueueItemsResponse)
	err := grpc.Invoke(ctx, "/api.Queue/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Queue service

type QueueServer interface {
	// Enqueue adds the given payload to the queue.
	Enqueue(context.Context, *EnqueueItemRequest) (*EnqueueItemResponse, error)
	// Delete deletes an item from the queue.
	Delete(context.Context, *DeleteQueueItemRequest) (*DeleteQueueItemResponse, error)
	// List lists the items in the queue for the given devEUI.
	List(context.Context, *ListQueueItemsRequest) (*ListQueueItemsResponse, error)
}

func RegisterQueueServer(s *grpc.Server, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Queue/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Enqueue(ctx, req.(*EnqueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Queue/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Delete(ctx, req.(*DeleteQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueueItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Queue/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).List(ctx, req.(*ListQueueItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _Queue_Enqueue_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Queue_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Queue_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor3,
}

func init() { proto.RegisterFile("queue.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0xcd, 0x6e, 0xa2, 0x50,
	0x14, 0xc7, 0x03, 0x08, 0xea, 0x31, 0xba, 0x38, 0xa3, 0x78, 0x07, 0xcd, 0x84, 0x90, 0x59, 0x10,
	0x17, 0x92, 0x71, 0x76, 0xb3, 0x98, 0xd5, 0xb8, 0x30, 0x99, 0x45, 0x4b, 0xd2, 0x6e, 0x0d, 0x2d,
	0x57, 0x73, 0x13, 0xbd, 0x17, 0xe5, 0xea, 0xa6, 0x71, 0xd3, 0x57, 0x68, 0xfa, 0x00, 0x7d, 0xa6,
	0xbe, 0x42, 0x1f, 0xa4, 0xf1, 0x42, 0xfd, 0x40, 0x9a, 0xee, 0x38, 0x5f, 0x3f, 0xce, 0xff, 0x7f,
	0x00, 0x1a, 0xab, 0x0d, 0xdd, 0xd0, 0x61, 0xb2, 0x16, 0x52, 0xa0, 0x11, 0x25, 0xcc, 0xe9, 0xcf,
	0x85, 0x98, 0x2f, 0x68, 0x10, 0x25, 0x2c, 0x88, 0x38, 0x17, 0x32, 0x92, 0x4c, 0xf0, 0x34, 0x6b,
	0xf1, 0x24, 0xe0, 0x98, 0xab, 0x99, 0x89, 0xa4, 0xcb, 0x90, 0xae, 0x36, 0x34, 0x95, 0x68, 0x83,
	0x15, 0xd3, 0xed, 0xf8, 0x66, 0x42, 0x34, 0x57, 0xf3, 0xeb, 0x61, 0x1e, 0x61, 0x1f, 0xea, 0xf7,
	0x82, 0xcf, 0xd8, 0x7a, 0x49, 0x63, 0xa2, 0xbb, 0x9a, 0x5f, 0x0b, 0x8f, 0x09, 0x6c, 0x83, 0x39,
	0xbb, 0x12, 0x6b, 0x49, 0x0c, 0x57, 0xf3, 0x9b, 0x61, 0x16, 0x20, 0x42, 0x25, 0x8e, 0x64, 0x44,
	0x2a, 0x8a, 0xa4, 0x9e, 0xbd, 0x0e, 0x7c, 0x3b, 0x7b, 0x6b, 0x9a, 0x08, 0x9e, 0x52, 0xcf, 0x07,
	0xfb, 0x1f, 0x5d, 0x50, 0x49, 0xaf, 0x8b, 0x0b, 0xb5, 0x40, 0x67, 0xb1, 0x5a, 0xc6, 0x08, 0x75,
	0x16, 0x7b, 0xdf, 0xa1, 0x7b, 0xd1, 0x99, 0x43, 0x9e, 0x35, 0xa8, 0x1f, 0xb2, 0xc5, 0xc1, 0x13,
	0x65, 0xfa, 0xe7, 0xca, 0x8c, 0xa2, 0x32, 0x02, 0xd5, 0x84, 0xf2, 0x98, 0xf1, 0xb9, 0x92, 0x51,
	0x0b, 0x3f, 0xc2, 0xa3, 0x66, 0xb3, 0x4c, 0xb3, 0x75, 0xa2, 0x39, 0x80, 0xce, 0x7f, 0x96, 0xca,
	0xc3, 0x6a, 0xe9, 0x17, 0x66, 0x7b, 0x7f, 0xc1, 0x2e, 0x0e, 0x64, 0x12, 0xf1, 0x27, 0x98, 0x6c,
	0x9f, 0x20, 0x9a, 0x6b, 0xf8, 0x8d, 0x51, 0x6b, 0x18, 0x25, 0x6c, 0x78, 0x74, 0x22, 0x2b, 0x8e,
	0x5e, 0x74, 0x30, 0x55, 0x12, 0x6f, 0xa1, 0x9a, 0xdb, 0x8d, 0x5d, 0xd5, 0x7b, 0x79, 0x72, 0x87,
	0x5c, 0x16, 0x72, 0x43, 0xc9, 0xe3, 0xeb, 0xdb, 0x93, 0x8e, 0x5e, 0x53, 0x7d, 0x42, 0xdb, 0x5f,
	0x81, 0x6a, 0xf9, 0xa3, 0x0d, 0x70, 0x0a, 0x56, 0x76, 0x05, 0xec, 0xa9, 0xe9, 0xf2, 0xe3, 0x39,
	0xfd, 0xf2, 0x62, 0x8e, 0x77, 0x14, 0xbe, 0x3d, 0xc0, 0x33, 0x7c, 0xf0, 0xc0, 0xe2, 0x1d, 0x4e,
	0xa1, 0xb2, 0xb7, 0x00, 0x1d, 0x45, 0x28, 0xb5, 0xcf, 0xe9, 0x95, 0xd6, 0x72, 0xf8, 0x0f, 0x05,
	0x27, 0x68, 0x17, 0xe0, 0x99, 0xc5, 0xbb, 0x3b, 0x4b, 0xfd, 0x05, 0xbf, 0xdf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0xdf, 0xc8, 0xcd, 0x37, 0x03, 0x00, 0x00,
}
