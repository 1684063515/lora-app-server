// Code generated by protoc-gen-go.
// source: nodeSession.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateNodeSessionRequest struct {
	// Name of the application owning the node.
	ApplicationName string `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
	// Name of the node.
	NodeName string `protobuf:"bytes,3,opt,name=nodeName" json:"nodeName,omitempty"`
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
	// Hex encoded AppSKey.
	AppSKey string `protobuf:"bytes,4,opt,name=appSKey" json:"appSKey,omitempty"`
	// Hex encoded NwkSKey.
	NwkSKey string `protobuf:"bytes,5,opt,name=nwkSKey" json:"nwkSKey,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,6,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// Downlink frame-counter.
	FCntDown uint32 `protobuf:"varint,7,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,8,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,9,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// Additional frequencies used for CFList (see LoRaWAN regional parameters if this applies to your region).
	CFList []uint32 `protobuf:"varint,10,rep,packed,name=cFList" json:"cFList,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,11,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,12,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,13,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,14,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,15,opt,name=installationMargin" json:"installationMargin,omitempty"`
}

func (m *CreateNodeSessionRequest) Reset()                    { *m = CreateNodeSessionRequest{} }
func (m *CreateNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeSessionRequest) ProtoMessage()               {}
func (*CreateNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *CreateNodeSessionRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *CreateNodeSessionRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *CreateNodeSessionRequest) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func (m *CreateNodeSessionRequest) GetAppSKey() string {
	if m != nil {
		return m.AppSKey
	}
	return ""
}

func (m *CreateNodeSessionRequest) GetNwkSKey() string {
	if m != nil {
		return m.NwkSKey
	}
	return ""
}

func (m *CreateNodeSessionRequest) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetCFList() []uint32 {
	if m != nil {
		return m.CFList
	}
	return nil
}

func (m *CreateNodeSessionRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *CreateNodeSessionRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *CreateNodeSessionRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

type CreateNodeSessionResponse struct {
}

func (m *CreateNodeSessionResponse) Reset()                    { *m = CreateNodeSessionResponse{} }
func (m *CreateNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeSessionResponse) ProtoMessage()               {}
func (*CreateNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type GetNodeSessionRequest struct {
	// Name of the application owning the node.
	ApplicationName string `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
	// Name of the node.
	NodeName string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *GetNodeSessionRequest) Reset()                    { *m = GetNodeSessionRequest{} }
func (m *GetNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeSessionRequest) ProtoMessage()               {}
func (*GetNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *GetNodeSessionRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *GetNodeSessionRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type GetNodeSessionResponse struct {
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
	// Hex encoded AppEUI.
	AppEUI string `protobuf:"bytes,2,opt,name=appEUI" json:"appEUI,omitempty"`
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,3,opt,name=devEUI" json:"devEUI,omitempty"`
	// Hex encoded AppSKey.
	AppSKey string `protobuf:"bytes,4,opt,name=appSKey" json:"appSKey,omitempty"`
	// Hex encoded NwkSKey.
	NwkSKey string `protobuf:"bytes,5,opt,name=nwkSKey" json:"nwkSKey,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,6,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// Downlink frame-counter.
	FCntDown uint32 `protobuf:"varint,7,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,8,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,9,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// Additional frequencies used for CFList (see LoRaWAN regional parameters if this applies to your region).
	CFList []uint32 `protobuf:"varint,10,rep,packed,name=cFList" json:"cFList,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,11,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,12,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,13,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,14,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,15,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// The number of times the node (re)transmits (defined by the ADR engine).
	NbTrans uint32 `protobuf:"varint,16,opt,name=nbTrans" json:"nbTrans,omitempty"`
	// The TX power of the node (defined by the ADR engine).
	TxPower uint32 `protobuf:"varint,17,opt,name=txPower" json:"txPower,omitempty"`
}

func (m *GetNodeSessionResponse) Reset()                    { *m = GetNodeSessionResponse{} }
func (m *GetNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeSessionResponse) ProtoMessage()               {}
func (*GetNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *GetNodeSessionResponse) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func (m *GetNodeSessionResponse) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *GetNodeSessionResponse) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *GetNodeSessionResponse) GetAppSKey() string {
	if m != nil {
		return m.AppSKey
	}
	return ""
}

func (m *GetNodeSessionResponse) GetNwkSKey() string {
	if m != nil {
		return m.NwkSKey
	}
	return ""
}

func (m *GetNodeSessionResponse) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *GetNodeSessionResponse) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *GetNodeSessionResponse) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *GetNodeSessionResponse) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *GetNodeSessionResponse) GetCFList() []uint32 {
	if m != nil {
		return m.CFList
	}
	return nil
}

func (m *GetNodeSessionResponse) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *GetNodeSessionResponse) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *GetNodeSessionResponse) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *GetNodeSessionResponse) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *GetNodeSessionResponse) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *GetNodeSessionResponse) GetNbTrans() uint32 {
	if m != nil {
		return m.NbTrans
	}
	return 0
}

func (m *GetNodeSessionResponse) GetTxPower() uint32 {
	if m != nil {
		return m.TxPower
	}
	return 0
}

type UpdateNodeSessionRequest struct {
	// Name of the application owning the node.
	ApplicationName string `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
	// Name of the node.
	NodeName string `protobuf:"bytes,3,opt,name=nodeName" json:"nodeName,omitempty"`
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
	// Hex encoded AppSKey.
	AppSKey string `protobuf:"bytes,4,opt,name=appSKey" json:"appSKey,omitempty"`
	// Hex encoded NwkSKey.
	NwkSKey string `protobuf:"bytes,5,opt,name=nwkSKey" json:"nwkSKey,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,6,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// Downlink frame-counter.
	FCntDown uint32 `protobuf:"varint,7,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,8,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,9,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// Additional frequencies used for CFList (see LoRaWAN regional parameters if this applies to your region).
	CFList []uint32 `protobuf:"varint,10,rep,packed,name=cFList" json:"cFList,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,11,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,12,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,13,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,14,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,15,opt,name=installationMargin" json:"installationMargin,omitempty"`
}

func (m *UpdateNodeSessionRequest) Reset()                    { *m = UpdateNodeSessionRequest{} }
func (m *UpdateNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeSessionRequest) ProtoMessage()               {}
func (*UpdateNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *UpdateNodeSessionRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *UpdateNodeSessionRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *UpdateNodeSessionRequest) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func (m *UpdateNodeSessionRequest) GetAppSKey() string {
	if m != nil {
		return m.AppSKey
	}
	return ""
}

func (m *UpdateNodeSessionRequest) GetNwkSKey() string {
	if m != nil {
		return m.NwkSKey
	}
	return ""
}

func (m *UpdateNodeSessionRequest) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetCFList() []uint32 {
	if m != nil {
		return m.CFList
	}
	return nil
}

func (m *UpdateNodeSessionRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *UpdateNodeSessionRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *UpdateNodeSessionRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

type UpdateNodeSessionResponse struct {
}

func (m *UpdateNodeSessionResponse) Reset()                    { *m = UpdateNodeSessionResponse{} }
func (m *UpdateNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeSessionResponse) ProtoMessage()               {}
func (*UpdateNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type DeleteNodeSessionRequest struct {
	// Name of the application owning the node.
	ApplicationName string `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
	// Name of the node.
	NodeName string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *DeleteNodeSessionRequest) Reset()                    { *m = DeleteNodeSessionRequest{} }
func (m *DeleteNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeSessionRequest) ProtoMessage()               {}
func (*DeleteNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *DeleteNodeSessionRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *DeleteNodeSessionRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type DeleteNodeSessionResponse struct {
}

func (m *DeleteNodeSessionResponse) Reset()                    { *m = DeleteNodeSessionResponse{} }
func (m *DeleteNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeSessionResponse) ProtoMessage()               {}
func (*DeleteNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

type GetRandomDevAddrRequest struct {
	// Name of the application owning the node.
	ApplicationName string `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
	// Name of the node.
	NodeName string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *GetRandomDevAddrRequest) Reset()                    { *m = GetRandomDevAddrRequest{} }
func (m *GetRandomDevAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrRequest) ProtoMessage()               {}
func (*GetRandomDevAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *GetRandomDevAddrRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *GetRandomDevAddrRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type GetRandomDevAddrResponse struct {
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
}

func (m *GetRandomDevAddrResponse) Reset()                    { *m = GetRandomDevAddrResponse{} }
func (m *GetRandomDevAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrResponse) ProtoMessage()               {}
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *GetRandomDevAddrResponse) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateNodeSessionRequest)(nil), "api.CreateNodeSessionRequest")
	proto.RegisterType((*CreateNodeSessionResponse)(nil), "api.CreateNodeSessionResponse")
	proto.RegisterType((*GetNodeSessionRequest)(nil), "api.GetNodeSessionRequest")
	proto.RegisterType((*GetNodeSessionResponse)(nil), "api.GetNodeSessionResponse")
	proto.RegisterType((*UpdateNodeSessionRequest)(nil), "api.UpdateNodeSessionRequest")
	proto.RegisterType((*UpdateNodeSessionResponse)(nil), "api.UpdateNodeSessionResponse")
	proto.RegisterType((*DeleteNodeSessionRequest)(nil), "api.DeleteNodeSessionRequest")
	proto.RegisterType((*DeleteNodeSessionResponse)(nil), "api.DeleteNodeSessionResponse")
	proto.RegisterType((*GetRandomDevAddrRequest)(nil), "api.GetRandomDevAddrRequest")
	proto.RegisterType((*GetRandomDevAddrResponse)(nil), "api.GetRandomDevAddrResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeSession service

type NodeSessionClient interface {
	// Create creates the given node-session. The DevAddr must contain the same NwkID as the configured NetID. Node-sessions will expire automatically after the configured TTL.
	Create(ctx context.Context, in *CreateNodeSessionRequest, opts ...grpc.CallOption) (*CreateNodeSessionResponse, error)
	// Get returns the node-session matching the given node.
	Get(ctx context.Context, in *GetNodeSessionRequest, opts ...grpc.CallOption) (*GetNodeSessionResponse, error)
	// Update updates the given node-session.
	Update(ctx context.Context, in *UpdateNodeSessionRequest, opts ...grpc.CallOption) (*UpdateNodeSessionResponse, error)
	// Delete deletes the node-session matching the given node.
	Delete(ctx context.Context, in *DeleteNodeSessionRequest, opts ...grpc.CallOption) (*DeleteNodeSessionResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
}

type nodeSessionClient struct {
	cc *grpc.ClientConn
}

func NewNodeSessionClient(cc *grpc.ClientConn) NodeSessionClient {
	return &nodeSessionClient{cc}
}

func (c *nodeSessionClient) Create(ctx context.Context, in *CreateNodeSessionRequest, opts ...grpc.CallOption) (*CreateNodeSessionResponse, error) {
	out := new(CreateNodeSessionResponse)
	err := grpc.Invoke(ctx, "/api.NodeSession/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSessionClient) Get(ctx context.Context, in *GetNodeSessionRequest, opts ...grpc.CallOption) (*GetNodeSessionResponse, error) {
	out := new(GetNodeSessionResponse)
	err := grpc.Invoke(ctx, "/api.NodeSession/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSessionClient) Update(ctx context.Context, in *UpdateNodeSessionRequest, opts ...grpc.CallOption) (*UpdateNodeSessionResponse, error) {
	out := new(UpdateNodeSessionResponse)
	err := grpc.Invoke(ctx, "/api.NodeSession/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSessionClient) Delete(ctx context.Context, in *DeleteNodeSessionRequest, opts ...grpc.CallOption) (*DeleteNodeSessionResponse, error) {
	out := new(DeleteNodeSessionResponse)
	err := grpc.Invoke(ctx, "/api.NodeSession/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSessionClient) GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := grpc.Invoke(ctx, "/api.NodeSession/GetRandomDevAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeSession service

type NodeSessionServer interface {
	// Create creates the given node-session. The DevAddr must contain the same NwkID as the configured NetID. Node-sessions will expire automatically after the configured TTL.
	Create(context.Context, *CreateNodeSessionRequest) (*CreateNodeSessionResponse, error)
	// Get returns the node-session matching the given node.
	Get(context.Context, *GetNodeSessionRequest) (*GetNodeSessionResponse, error)
	// Update updates the given node-session.
	Update(context.Context, *UpdateNodeSessionRequest) (*UpdateNodeSessionResponse, error)
	// Delete deletes the node-session matching the given node.
	Delete(context.Context, *DeleteNodeSessionRequest) (*DeleteNodeSessionResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *GetRandomDevAddrRequest) (*GetRandomDevAddrResponse, error)
}

func RegisterNodeSessionServer(s *grpc.Server, srv NodeSessionServer) {
	s.RegisterService(&_NodeSession_serviceDesc, srv)
}

func _NodeSession_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSessionServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NodeSession/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSessionServer).Create(ctx, req.(*CreateNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSession_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSessionServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NodeSession/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSessionServer).Get(ctx, req.(*GetNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSession_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSessionServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NodeSession/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSessionServer).Update(ctx, req.(*UpdateNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSession_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSessionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NodeSession/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSessionServer).Delete(ctx, req.(*DeleteNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSession_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSessionServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NodeSession/GetRandomDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSessionServer).GetRandomDevAddr(ctx, req.(*GetRandomDevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeSession_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.NodeSession",
	HandlerType: (*NodeSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NodeSession_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NodeSession_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeSession_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeSession_Delete_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _NodeSession_GetRandomDevAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeSession.proto",
}

func init() { proto.RegisterFile("nodeSession.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x4f, 0x14, 0x4f,
	0x10, 0x4d, 0xb3, 0xb0, 0x2c, 0xcd, 0xff, 0xce, 0xef, 0x87, 0xcd, 0x00, 0x66, 0xb2, 0xa7, 0x95,
	0xc3, 0x6e, 0x44, 0x4f, 0xc6, 0x98, 0x10, 0x06, 0x36, 0x44, 0x41, 0x33, 0x48, 0xf4, 0x62, 0xb4,
	0x61, 0x9a, 0xcd, 0xc4, 0xd9, 0xee, 0xb6, 0xbb, 0x65, 0x97, 0x10, 0x2e, 0xea, 0xd5, 0xc4, 0xc4,
	0xbb, 0x5f, 0xca, 0xaf, 0x60, 0xe2, 0xc1, 0x2f, 0x61, 0xfa, 0xcf, 0x02, 0x8e, 0x33, 0x9a, 0x08,
	0xf1, 0x22, 0xb7, 0x7d, 0xf5, 0x66, 0xab, 0x5e, 0x55, 0xbd, 0xd4, 0x0c, 0x9c, 0x65, 0x3c, 0xa1,
	0x3b, 0x54, 0xa9, 0x94, 0xb3, 0xa6, 0x90, 0x5c, 0x73, 0x54, 0x21, 0x22, 0x0d, 0x16, 0x3b, 0x9c,
	0x77, 0x32, 0xda, 0x22, 0x22, 0x6d, 0x11, 0xc6, 0xb8, 0x26, 0x3a, 0xe5, 0x4c, 0xb9, 0x47, 0x82,
	0x89, 0x7d, 0xde, 0xed, 0x0e, 0xfe, 0x50, 0xff, 0x5a, 0x81, 0x78, 0x4d, 0x52, 0xa2, 0xe9, 0xf6,
	0x59, 0xb2, 0x98, 0xbe, 0x7a, 0x4d, 0x95, 0x46, 0x0d, 0x38, 0x4d, 0x84, 0xc8, 0xd2, 0x7d, 0x9b,
	0x60, 0x9b, 0x74, 0x29, 0x1e, 0x0a, 0x41, 0x63, 0x2c, 0xce, 0x87, 0x51, 0x00, 0x6b, 0x46, 0x8c,
	0x7d, 0xa4, 0x62, 0x1f, 0x39, 0xc5, 0x08, 0xc3, 0xd1, 0x84, 0x1e, 0xae, 0x26, 0x89, 0xc4, 0xc0,
	0x52, 0x03, 0x68, 0x18, 0x22, 0xc4, 0xce, 0x7d, 0x7a, 0x84, 0x87, 0x1d, 0xe3, 0xa1, 0x61, 0x58,
	0xef, 0xa5, 0x65, 0x46, 0x1c, 0xe3, 0x21, 0x9a, 0x83, 0xd5, 0x83, 0x35, 0xa6, 0x77, 0x05, 0xae,
	0x86, 0xa0, 0x31, 0x19, 0x7b, 0x64, 0x14, 0x98, 0x5f, 0x11, 0xef, 0x31, 0x3c, 0x6a, 0x99, 0x53,
	0x6c, 0xb2, 0xc9, 0x7e, 0x44, 0x33, 0x72, 0x84, 0x6b, 0x96, 0x1a, 0x40, 0x14, 0xc2, 0x71, 0xd9,
	0xbf, 0x19, 0xc5, 0x0f, 0x0f, 0x0e, 0x14, 0xd5, 0x78, 0xcc, 0xb2, 0xe7, 0x43, 0xa6, 0xde, 0xfe,
	0xc6, 0x83, 0x54, 0x69, 0x0c, 0xc3, 0x8a, 0xa9, 0xe7, 0x10, 0xba, 0x01, 0x6b, 0xb2, 0xff, 0x24,
	0x65, 0x09, 0xef, 0xe1, 0xf1, 0x10, 0x34, 0xa6, 0x56, 0x26, 0x9b, 0x44, 0xa4, 0xcd, 0xf8, 0xa9,
	0x0b, 0xc6, 0xa7, 0x34, 0xfa, 0x0f, 0x8e, 0xc8, 0xfe, 0x4a, 0x14, 0xe3, 0x09, 0x9b, 0xde, 0x01,
	0xb4, 0x08, 0xc7, 0x24, 0xcd, 0x48, 0x7f, 0x63, 0x8d, 0x69, 0x3c, 0x19, 0x82, 0x46, 0x2d, 0x3e,
	0x0b, 0x18, 0x61, 0x24, 0x91, 0x9b, 0x4c, 0x53, 0x79, 0x48, 0x32, 0x3c, 0xe5, 0x84, 0x9d, 0x0b,
	0xa1, 0x26, 0x44, 0x29, 0x53, 0x9a, 0x64, 0x99, 0x5d, 0xc3, 0x16, 0x91, 0x9d, 0x94, 0xe1, 0xe9,
	0x10, 0x34, 0x40, 0x5c, 0xc0, 0xd4, 0x17, 0xe0, 0x7c, 0xc1, 0xa2, 0x95, 0xe0, 0x4c, 0xd1, 0xfa,
	0x33, 0xf8, 0x7f, 0x9b, 0xea, 0x4b, 0xb3, 0x00, 0xf8, 0xd1, 0x02, 0xf5, 0xb7, 0xc3, 0x70, 0x2e,
	0x9f, 0xdf, 0x55, 0xfe, 0x85, 0x3b, 0xe6, 0x60, 0x95, 0x08, 0xb1, 0xbe, 0xbb, 0xe9, 0x2b, 0x7a,
	0x64, 0xe2, 0x09, 0x3d, 0x34, 0x71, 0xe7, 0x34, 0x8f, 0xae, 0xdc, 0xf4, 0x17, 0xdd, 0x64, 0x47,
	0xba, 0xf7, 0x58, 0x12, 0xa6, 0xf0, 0x8c, 0x1b, 0x82, 0x87, 0x86, 0xd1, 0xfd, 0x47, 0xbc, 0x47,
	0x25, 0x9e, 0x75, 0x8c, 0x87, 0xf6, 0xd6, 0xec, 0x8a, 0xe4, 0xea, 0xd6, 0xfc, 0x0b, 0xb7, 0xa6,
	0x60, 0xd1, 0xfe, 0xd6, 0xbc, 0x80, 0x38, 0xa2, 0x19, 0xbd, 0x44, 0x17, 0xe4, 0xcf, 0xcd, 0x02,
	0x9c, 0x2f, 0xa8, 0xe0, 0xcb, 0x3f, 0x87, 0xd7, 0xda, 0x54, 0xc7, 0x84, 0x25, 0xbc, 0x1b, 0x39,
	0x73, 0x5c, 0x6e, 0xf5, 0xdb, 0x10, 0xff, 0x5c, 0xe0, 0x77, 0xd7, 0x6e, 0xe5, 0xdb, 0x08, 0x1c,
	0x3f, 0x27, 0x17, 0x7d, 0x00, 0xb0, 0xea, 0xee, 0x35, 0x5a, 0xb2, 0xcb, 0x2e, 0x7b, 0x4b, 0x07,
	0xd7, 0xcb, 0x68, 0xdf, 0x70, 0xfb, 0xcd, 0xe7, 0x2f, 0x1f, 0x87, 0x56, 0xeb, 0x77, 0xdd, 0x07,
	0xc1, 0x59, 0x27, 0xaa, 0x75, 0x9c, 0xeb, 0xeb, 0xa4, 0x65, 0xba, 0x50, 0xad, 0xe3, 0x41, 0x33,
	0x27, 0x2d, 0xe5, 0xb2, 0xdd, 0x01, 0xcb, 0xe8, 0x1d, 0x80, 0x95, 0x36, 0xd5, 0x28, 0xb0, 0x05,
	0x0b, 0xdf, 0x17, 0xc1, 0x42, 0x21, 0xe7, 0x95, 0x44, 0x56, 0xc9, 0x3d, 0x74, 0x21, 0x25, 0x76,
	0x32, 0xce, 0x5d, 0x7e, 0x32, 0x65, 0x37, 0xc5, 0x4f, 0xa6, 0xdc, 0x89, 0x7e, 0x32, 0xc1, 0x85,
	0x27, 0xf3, 0x1e, 0xc0, 0xaa, 0x73, 0x9c, 0x97, 0x54, 0x66, 0x70, 0x2f, 0xa9, 0xdc, 0x9d, 0x7e,
	0x44, 0xcb, 0x17, 0x1b, 0xd1, 0x27, 0x00, 0x67, 0xf2, 0x1e, 0x44, 0x8b, 0x83, 0xd5, 0x14, 0x79,
	0x3f, 0x58, 0x2a, 0x61, 0xbd, 0xae, 0x2d, 0xab, 0xab, 0x5d, 0x5f, 0xff, 0x23, 0x5d, 0x9d, 0x5c,
	0xda, 0xbd, 0xaa, 0xfd, 0xfa, 0xbc, 0xf5, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x64, 0x26, 0x60, 0x23,
	0xc3, 0x0a, 0x00, 0x00,
}
