// Code generated by protoc-gen-go.
// source: node.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	node.proto
	application.proto
	downlinkQueue.proto
	common.proto
	user.proto
	gateway.proto
	organization.proto

It has these top-level messages:
	CreateNodeRequest
	CreateNodeResponse
	GetNodeRequest
	GetNodeResponse
	DeleteNodeRequest
	DeleteNodeResponse
	ListNodeByApplicationIDRequest
	ListNodeResponse
	UpdateNodeRequest
	UpdateNodeResponse
	ActivateNodeRequest
	ActivateNodeResponse
	GetNodeActivationRequest
	GetNodeActivationResponse
	GetRandomDevAddrRequest
	GetRandomDevAddrResponse
	GetFrameLogsRequest
	GetFrameLogsResponse
	FrameLog
	DataRate
	RXInfo
	TXInfo
	PHYPayload
	CreateApplicationRequest
	CreateApplicationResponse
	GetApplicationRequest
	GetApplicationResponse
	UpdateApplicationRequest
	UpdateApplicationResponse
	DeleteApplicationRequest
	DeleteApplicationResponse
	ListApplicationRequest
	ListApplicationResponse
	ListApplicationUsersRequest
	GetApplicationUserResponse
	ListApplicationUsersResponse
	AddApplicationUserRequest
	ApplicationUserRequest
	UpdateApplicationUserRequest
	EmptyApplicationUserResponse
	EnqueueDownlinkQueueItemRequest
	EnqueueDownlinkQueueItemResponse
	DeleteDownlinkQeueueItemRequest
	DeleteDownlinkQueueItemResponse
	DownlinkQueueItem
	ListDownlinkQueueItemsRequest
	ListDownlinkQueueItemsResponse
	ApplicationLink
	OrganizationLink
	UserProfile
	ProfileRequest
	ProfileResponse
	ProfileSettings
	LoginRequest
	LoginResponse
	ListUserRequest
	UserRequest
	AddUserResponse
	UserSettings
	UserInfo
	GetUserResponse
	AddUserRequest
	AddUserOrganization
	AddUserApplication
	UpdateUserRequest
	ListUserResponse
	UserEmptyResponse
	UpdateUserPasswordRequest
	CreateGatewayRequest
	CreateGatewayResponse
	GetGatewayRequest
	GetGatewayResponse
	DeleteGatewayRequest
	DeleteGatewayResponse
	ListGatewayRequest
	ListGatewayItem
	ListGatewayResponse
	UpdateGatewayRequest
	UpdateGatewayResponse
	GatewayStats
	GetGatewayStatsRequest
	GetGatewayStatsResponse
	ListOrganizationRequest
	OrganizationRequest
	GetOrganizationResponse
	CreateOrganizationRequest
	CreateOrganizationResponse
	UpdateOrganizationRequest
	ListOrganizationResponse
	OrganizationEmptyResponse
	OrganizationUserRequest
	DeleteOrganizationUserRequest
	ListOrganizationUsersRequest
	GetOrganizationUserRequest
	GetOrganizationUserResponse
	ListOrganizationUsersResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateNodeRequest struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Hex encoded AppEUI.
	AppEUI string `protobuf:"bytes,2,opt,name=appEUI" json:"appEUI,omitempty"`
	// Hex encoded AppKey. When isABP is set to true, this field is not needed.
	AppKey string `protobuf:"bytes,3,opt,name=appKey" json:"appKey,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Name of the node (if left blank, it will be set to the DevEUI).
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,10,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,11,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,12,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// ID of the application to which the node must be added.
	ApplicationID int64 `protobuf:"varint,13,opt,name=applicationID" json:"applicationID,omitempty"`
	// Description of the node.
	Description string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
	// Node is activated by ABP.
	IsABP bool `protobuf:"varint,15,opt,name=isABP" json:"isABP,omitempty"`
	// Node operates in Class-C.
	IsClassC bool `protobuf:"varint,16,opt,name=isClassC" json:"isClassC,omitempty"`
	// When set to true, the application settings will be used to populate the node network settings.
	UseApplicationSettings bool `protobuf:"varint,17,opt,name=useApplicationSettings" json:"useApplicationSettings,omitempty"`
}

func (m *CreateNodeRequest) Reset()                    { *m = CreateNodeRequest{} }
func (m *CreateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeRequest) ProtoMessage()               {}
func (*CreateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateNodeRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *CreateNodeRequest) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *CreateNodeRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *CreateNodeRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *CreateNodeRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *CreateNodeRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *CreateNodeRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *CreateNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateNodeRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *CreateNodeRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *CreateNodeRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *CreateNodeRequest) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *CreateNodeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateNodeRequest) GetIsABP() bool {
	if m != nil {
		return m.IsABP
	}
	return false
}

func (m *CreateNodeRequest) GetIsClassC() bool {
	if m != nil {
		return m.IsClassC
	}
	return false
}

func (m *CreateNodeRequest) GetUseApplicationSettings() bool {
	if m != nil {
		return m.UseApplicationSettings
	}
	return false
}

type CreateNodeResponse struct {
}

func (m *CreateNodeResponse) Reset()                    { *m = CreateNodeResponse{} }
func (m *CreateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeResponse) ProtoMessage()               {}
func (*CreateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetNodeRequest struct {
	// Hex encoded DevEUI of the node.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *GetNodeRequest) Reset()                    { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()               {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetNodeRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type GetNodeResponse struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Hex encoded AppEUI.
	AppEUI string `protobuf:"bytes,2,opt,name=appEUI" json:"appEUI,omitempty"`
	// Hex encoded AppKey.
	AppKey string `protobuf:"bytes,3,opt,name=appKey" json:"appKey,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Name of the node.
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,10,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,11,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,12,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// Description of the node.
	Description string `protobuf:"bytes,13,opt,name=description" json:"description,omitempty"`
	// Node is activated by ABP.
	IsABP bool `protobuf:"varint,14,opt,name=isABP" json:"isABP,omitempty"`
	// ID of the application owning the node.
	ApplicationID int64 `protobuf:"varint,15,opt,name=applicationID" json:"applicationID,omitempty"`
	// Node operates in Class-C.
	IsClassC bool `protobuf:"varint,16,opt,name=isClassC" json:"isClassC,omitempty"`
	// When set to true, the application settings will be used to populate the node network settings.
	UseApplicationSettings bool `protobuf:"varint,17,opt,name=useApplicationSettings" json:"useApplicationSettings,omitempty"`
}

func (m *GetNodeResponse) Reset()                    { *m = GetNodeResponse{} }
func (m *GetNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeResponse) ProtoMessage()               {}
func (*GetNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetNodeResponse) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *GetNodeResponse) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *GetNodeResponse) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *GetNodeResponse) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *GetNodeResponse) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *GetNodeResponse) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *GetNodeResponse) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *GetNodeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetNodeResponse) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *GetNodeResponse) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *GetNodeResponse) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *GetNodeResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetNodeResponse) GetIsABP() bool {
	if m != nil {
		return m.IsABP
	}
	return false
}

func (m *GetNodeResponse) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *GetNodeResponse) GetIsClassC() bool {
	if m != nil {
		return m.IsClassC
	}
	return false
}

func (m *GetNodeResponse) GetUseApplicationSettings() bool {
	if m != nil {
		return m.UseApplicationSettings
	}
	return false
}

type DeleteNodeRequest struct {
	// Hex encoded DevEUI of the node.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *DeleteNodeRequest) Reset()                    { *m = DeleteNodeRequest{} }
func (m *DeleteNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeRequest) ProtoMessage()               {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteNodeRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type DeleteNodeResponse struct {
}

func (m *DeleteNodeResponse) Reset()                    { *m = DeleteNodeResponse{} }
func (m *DeleteNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeResponse) ProtoMessage()               {}
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ListNodeByApplicationIDRequest struct {
	// ID of the application for which to list the nodes.
	ApplicationID int64 `protobuf:"varint,3,opt,name=applicationID" json:"applicationID,omitempty"`
	// Max number of nodes to return in the result-set.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset of the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListNodeByApplicationIDRequest) Reset()                    { *m = ListNodeByApplicationIDRequest{} }
func (m *ListNodeByApplicationIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodeByApplicationIDRequest) ProtoMessage()               {}
func (*ListNodeByApplicationIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListNodeByApplicationIDRequest) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *ListNodeByApplicationIDRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListNodeByApplicationIDRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListNodeResponse struct {
	// Total number of nodes available within the result-set.
	TotalCount int64 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Nodes within this result-set.
	Result []*GetNodeResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListNodeResponse) Reset()                    { *m = ListNodeResponse{} }
func (m *ListNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodeResponse) ProtoMessage()               {}
func (*ListNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListNodeResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListNodeResponse) GetResult() []*GetNodeResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateNodeRequest struct {
	// Hex encoded DevEUI of the node to update.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Hex encoded AppEUI.
	AppEUI string `protobuf:"bytes,2,opt,name=appEUI" json:"appEUI,omitempty"`
	// Hex encoded AppKey.
	AppKey string `protobuf:"bytes,3,opt,name=appKey" json:"appKey,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Name of the node (note that renaming the node affects its api endpoint)
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,10,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,11,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,12,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// ID of the application owning the node.
	ApplicationID int64 `protobuf:"varint,13,opt,name=applicationID" json:"applicationID,omitempty"`
	// Description of the node.
	Description string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
	// Node is activated by ABP.
	IsABP bool `protobuf:"varint,15,opt,name=isABP" json:"isABP,omitempty"`
	// Node operates in Class-C.
	IsClassC bool `protobuf:"varint,16,opt,name=isClassC" json:"isClassC,omitempty"`
	// When set to true, the application settings will be used to populate the node network settings.
	UseApplicationSettings bool `protobuf:"varint,17,opt,name=useApplicationSettings" json:"useApplicationSettings,omitempty"`
}

func (m *UpdateNodeRequest) Reset()                    { *m = UpdateNodeRequest{} }
func (m *UpdateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeRequest) ProtoMessage()               {}
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateNodeRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *UpdateNodeRequest) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *UpdateNodeRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *UpdateNodeRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *UpdateNodeRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *UpdateNodeRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *UpdateNodeRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *UpdateNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateNodeRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *UpdateNodeRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *UpdateNodeRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *UpdateNodeRequest) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *UpdateNodeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateNodeRequest) GetIsABP() bool {
	if m != nil {
		return m.IsABP
	}
	return false
}

func (m *UpdateNodeRequest) GetIsClassC() bool {
	if m != nil {
		return m.IsClassC
	}
	return false
}

func (m *UpdateNodeRequest) GetUseApplicationSettings() bool {
	if m != nil {
		return m.UseApplicationSettings
	}
	return false
}

type UpdateNodeResponse struct {
}

func (m *UpdateNodeResponse) Reset()                    { *m = UpdateNodeResponse{} }
func (m *UpdateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeResponse) ProtoMessage()               {}
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ActivateNodeRequest struct {
	// Hex encoded DevEUI of the node to activate.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,2,opt,name=devAddr" json:"devAddr,omitempty"`
	// Hex encoded AppSKey.
	AppSKey string `protobuf:"bytes,3,opt,name=appSKey" json:"appSKey,omitempty"`
	// Hex encoded NwkSKey.
	NwkSKey string `protobuf:"bytes,4,opt,name=nwkSKey" json:"nwkSKey,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// Downlink frame-counter.
	FCntDown uint32 `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
}

func (m *ActivateNodeRequest) Reset()                    { *m = ActivateNodeRequest{} }
func (m *ActivateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateNodeRequest) ProtoMessage()               {}
func (*ActivateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ActivateNodeRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *ActivateNodeRequest) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func (m *ActivateNodeRequest) GetAppSKey() string {
	if m != nil {
		return m.AppSKey
	}
	return ""
}

func (m *ActivateNodeRequest) GetNwkSKey() string {
	if m != nil {
		return m.NwkSKey
	}
	return ""
}

func (m *ActivateNodeRequest) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *ActivateNodeRequest) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

type ActivateNodeResponse struct {
}

func (m *ActivateNodeResponse) Reset()                    { *m = ActivateNodeResponse{} }
func (m *ActivateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateNodeResponse) ProtoMessage()               {}
func (*ActivateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetNodeActivationRequest struct {
	// Hex encoded DevEUI of the node.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *GetNodeActivationRequest) Reset()                    { *m = GetNodeActivationRequest{} }
func (m *GetNodeActivationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeActivationRequest) ProtoMessage()               {}
func (*GetNodeActivationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetNodeActivationRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type GetNodeActivationResponse struct {
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
	// Hex encoded AppSKey.
	AppSKey string `protobuf:"bytes,2,opt,name=appSKey" json:"appSKey,omitempty"`
	// Hex encoded NwkSKey.
	NwkSKey string `protobuf:"bytes,3,opt,name=nwkSKey" json:"nwkSKey,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,4,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// Downlink frame-counter.
	FCntDown uint32 `protobuf:"varint,5,opt,name=fCntDown" json:"fCntDown,omitempty"`
}

func (m *GetNodeActivationResponse) Reset()                    { *m = GetNodeActivationResponse{} }
func (m *GetNodeActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeActivationResponse) ProtoMessage()               {}
func (*GetNodeActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetNodeActivationResponse) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func (m *GetNodeActivationResponse) GetAppSKey() string {
	if m != nil {
		return m.AppSKey
	}
	return ""
}

func (m *GetNodeActivationResponse) GetNwkSKey() string {
	if m != nil {
		return m.NwkSKey
	}
	return ""
}

func (m *GetNodeActivationResponse) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *GetNodeActivationResponse) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

type GetRandomDevAddrRequest struct {
}

func (m *GetRandomDevAddrRequest) Reset()                    { *m = GetRandomDevAddrRequest{} }
func (m *GetRandomDevAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrRequest) ProtoMessage()               {}
func (*GetRandomDevAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type GetRandomDevAddrResponse struct {
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
}

func (m *GetRandomDevAddrResponse) Reset()                    { *m = GetRandomDevAddrResponse{} }
func (m *GetRandomDevAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrResponse) ProtoMessage()               {}
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetRandomDevAddrResponse) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

type GetFrameLogsRequest struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Max number of frames to return in the result-set.
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset of the result-set (for pagination).
	Offset int64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *GetFrameLogsRequest) Reset()                    { *m = GetFrameLogsRequest{} }
func (m *GetFrameLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFrameLogsRequest) ProtoMessage()               {}
func (*GetFrameLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetFrameLogsRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *GetFrameLogsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetFrameLogsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetFrameLogsResponse struct {
	// Total number of logs.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// The result-set.
	Result []*FrameLog `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *GetFrameLogsResponse) Reset()                    { *m = GetFrameLogsResponse{} }
func (m *GetFrameLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetFrameLogsResponse) ProtoMessage()               {}
func (*GetFrameLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetFrameLogsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetFrameLogsResponse) GetResult() []*FrameLog {
	if m != nil {
		return m.Result
	}
	return nil
}

type FrameLog struct {
	// Timestamp of when the frame was logged.
	CreatedAt string `protobuf:"bytes,1,opt,name=createdAt" json:"createdAt,omitempty"`
	// RX-info set (in case of an uplink).
	RxInfoSet []*RXInfo `protobuf:"bytes,2,rep,name=rxInfoSet" json:"rxInfoSet,omitempty"`
	// TX-info (in case of a downlink).
	TxInfo *TXInfo `protobuf:"bytes,3,opt,name=txInfo" json:"txInfo,omitempty"`
	// LoRaWAN PHYPayload as a JSON string.
	PhyPayloadJSON string `protobuf:"bytes,4,opt,name=phyPayloadJSON" json:"phyPayloadJSON,omitempty"`
}

func (m *FrameLog) Reset()                    { *m = FrameLog{} }
func (m *FrameLog) String() string            { return proto.CompactTextString(m) }
func (*FrameLog) ProtoMessage()               {}
func (*FrameLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FrameLog) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *FrameLog) GetRxInfoSet() []*RXInfo {
	if m != nil {
		return m.RxInfoSet
	}
	return nil
}

func (m *FrameLog) GetTxInfo() *TXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *FrameLog) GetPhyPayloadJSON() string {
	if m != nil {
		return m.PhyPayloadJSON
	}
	return ""
}

type DataRate struct {
	Modulation   string `protobuf:"bytes,1,opt,name=modulation" json:"modulation,omitempty"`
	BandWidth    uint32 `protobuf:"varint,2,opt,name=bandWidth" json:"bandWidth,omitempty"`
	SpreadFactor uint32 `protobuf:"varint,3,opt,name=spreadFactor" json:"spreadFactor,omitempty"`
	Bitrate      uint32 `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
}

func (m *DataRate) Reset()                    { *m = DataRate{} }
func (m *DataRate) String() string            { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()               {}
func (*DataRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DataRate) GetModulation() string {
	if m != nil {
		return m.Modulation
	}
	return ""
}

func (m *DataRate) GetBandWidth() uint32 {
	if m != nil {
		return m.BandWidth
	}
	return 0
}

func (m *DataRate) GetSpreadFactor() uint32 {
	if m != nil {
		return m.SpreadFactor
	}
	return 0
}

func (m *DataRate) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type RXInfo struct {
	// Channel number on which the frame was received.
	Channel int32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	// Code-rate.
	CodeRate string `protobuf:"bytes,2,opt,name=codeRate" json:"codeRate,omitempty"`
	// frequency.
	Frequency int64 `protobuf:"varint,3,opt,name=frequency" json:"frequency,omitempty"`
	// LoRa SNR.
	LoRaSNR float64 `protobuf:"fixed64,4,opt,name=loRaSNR" json:"loRaSNR,omitempty"`
	// RSSI / signal strength.
	Rssi int32 `protobuf:"varint,5,opt,name=rssi" json:"rssi,omitempty"`
	// Time (when the gateway has a GPS).
	Time string `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	// Gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,8,opt,name=dataRate" json:"dataRate,omitempty"`
	// HEX encoded gateway MAC.
	Mac string `protobuf:"bytes,9,opt,name=mac" json:"mac,omitempty"`
}

func (m *RXInfo) Reset()                    { *m = RXInfo{} }
func (m *RXInfo) String() string            { return proto.CompactTextString(m) }
func (*RXInfo) ProtoMessage()               {}
func (*RXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RXInfo) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *RXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

func (m *RXInfo) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *RXInfo) GetLoRaSNR() float64 {
	if m != nil {
		return m.LoRaSNR
	}
	return 0
}

func (m *RXInfo) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *RXInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *RXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *RXInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type TXInfo struct {
	// Code-rate.
	CodeRate string `protobuf:"bytes,1,opt,name=codeRate" json:"codeRate,omitempty"`
	// Frequency.
	Frequency int64 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	// Immediately.
	Immediately bool `protobuf:"varint,3,opt,name=immediately" json:"immediately,omitempty"`
	// HEX encoded gateway MAC.
	Mac string `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	// TX power.
	Power int32 `protobuf:"varint,5,opt,name=power" json:"power,omitempty"`
	// Gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,7,opt,name=dataRate" json:"dataRate,omitempty"`
}

func (m *TXInfo) Reset()                    { *m = TXInfo{} }
func (m *TXInfo) String() string            { return proto.CompactTextString(m) }
func (*TXInfo) ProtoMessage()               {}
func (*TXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *TXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

func (m *TXInfo) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TXInfo) GetImmediately() bool {
	if m != nil {
		return m.Immediately
	}
	return false
}

func (m *TXInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *TXInfo) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *TXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

type PHYPayload struct {
}

func (m *PHYPayload) Reset()                    { *m = PHYPayload{} }
func (m *PHYPayload) String() string            { return proto.CompactTextString(m) }
func (*PHYPayload) ProtoMessage()               {}
func (*PHYPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*CreateNodeRequest)(nil), "api.CreateNodeRequest")
	proto.RegisterType((*CreateNodeResponse)(nil), "api.CreateNodeResponse")
	proto.RegisterType((*GetNodeRequest)(nil), "api.GetNodeRequest")
	proto.RegisterType((*GetNodeResponse)(nil), "api.GetNodeResponse")
	proto.RegisterType((*DeleteNodeRequest)(nil), "api.DeleteNodeRequest")
	proto.RegisterType((*DeleteNodeResponse)(nil), "api.DeleteNodeResponse")
	proto.RegisterType((*ListNodeByApplicationIDRequest)(nil), "api.ListNodeByApplicationIDRequest")
	proto.RegisterType((*ListNodeResponse)(nil), "api.ListNodeResponse")
	proto.RegisterType((*UpdateNodeRequest)(nil), "api.UpdateNodeRequest")
	proto.RegisterType((*UpdateNodeResponse)(nil), "api.UpdateNodeResponse")
	proto.RegisterType((*ActivateNodeRequest)(nil), "api.ActivateNodeRequest")
	proto.RegisterType((*ActivateNodeResponse)(nil), "api.ActivateNodeResponse")
	proto.RegisterType((*GetNodeActivationRequest)(nil), "api.GetNodeActivationRequest")
	proto.RegisterType((*GetNodeActivationResponse)(nil), "api.GetNodeActivationResponse")
	proto.RegisterType((*GetRandomDevAddrRequest)(nil), "api.GetRandomDevAddrRequest")
	proto.RegisterType((*GetRandomDevAddrResponse)(nil), "api.GetRandomDevAddrResponse")
	proto.RegisterType((*GetFrameLogsRequest)(nil), "api.GetFrameLogsRequest")
	proto.RegisterType((*GetFrameLogsResponse)(nil), "api.GetFrameLogsResponse")
	proto.RegisterType((*FrameLog)(nil), "api.FrameLog")
	proto.RegisterType((*DataRate)(nil), "api.DataRate")
	proto.RegisterType((*RXInfo)(nil), "api.RXInfo")
	proto.RegisterType((*TXInfo)(nil), "api.TXInfo")
	proto.RegisterType((*PHYPayload)(nil), "api.PHYPayload")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	// Create creates the given node.
	Create(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	// Get returns the node for the requested DevEUI.
	Get(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// Delete deletes the node matching the given DevEUI.
	Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	// ListByApplicationID lists the nodes by the given application ID, sorted by the name of the node.
	ListByApplicationID(ctx context.Context, in *ListNodeByApplicationIDRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
	// Update updates the node matching the given DevEUI.
	Update(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	// Activate (re)activates the node (only when ABP is set to true).
	Activate(ctx context.Context, in *ActivateNodeRequest, opts ...grpc.CallOption) (*ActivateNodeResponse, error)
	// GetActivation returns the current activation details of the node (OTAA and ABP).
	GetActivation(ctx context.Context, in *GetNodeActivationRequest, opts ...grpc.CallOption) (*GetNodeActivationResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
	// GetFrameLogs returns the uplink / downlink frame log for the given DevEUI.
	GetFrameLogs(ctx context.Context, in *GetFrameLogsRequest, opts ...grpc.CallOption) (*GetFrameLogsResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Create(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Get(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	out := new(DeleteNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListByApplicationID(ctx context.Context, in *ListNodeByApplicationIDRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	out := new(ListNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/ListByApplicationID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Update(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Activate(ctx context.Context, in *ActivateNodeRequest, opts ...grpc.CallOption) (*ActivateNodeResponse, error) {
	out := new(ActivateNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetActivation(ctx context.Context, in *GetNodeActivationRequest, opts ...grpc.CallOption) (*GetNodeActivationResponse, error) {
	out := new(GetNodeActivationResponse)
	err := grpc.Invoke(ctx, "/api.Node/GetActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := grpc.Invoke(ctx, "/api.Node/GetRandomDevAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetFrameLogs(ctx context.Context, in *GetFrameLogsRequest, opts ...grpc.CallOption) (*GetFrameLogsResponse, error) {
	out := new(GetFrameLogsResponse)
	err := grpc.Invoke(ctx, "/api.Node/GetFrameLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	// Create creates the given node.
	Create(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	// Get returns the node for the requested DevEUI.
	Get(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// Delete deletes the node matching the given DevEUI.
	Delete(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	// ListByApplicationID lists the nodes by the given application ID, sorted by the name of the node.
	ListByApplicationID(context.Context, *ListNodeByApplicationIDRequest) (*ListNodeResponse, error)
	// Update updates the node matching the given DevEUI.
	Update(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	// Activate (re)activates the node (only when ABP is set to true).
	Activate(context.Context, *ActivateNodeRequest) (*ActivateNodeResponse, error)
	// GetActivation returns the current activation details of the node (OTAA and ABP).
	GetActivation(context.Context, *GetNodeActivationRequest) (*GetNodeActivationResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *GetRandomDevAddrRequest) (*GetRandomDevAddrResponse, error)
	// GetFrameLogs returns the uplink / downlink frame log for the given DevEUI.
	GetFrameLogs(context.Context, *GetFrameLogsRequest) (*GetFrameLogsResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Create(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Get(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Delete(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListByApplicationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeByApplicationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListByApplicationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/ListByApplicationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListByApplicationID(ctx, req.(*ListNodeByApplicationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Update(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Activate(ctx, req.(*ActivateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/GetActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetActivation(ctx, req.(*GetNodeActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/GetRandomDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetRandomDevAddr(ctx, req.(*GetRandomDevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetFrameLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrameLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetFrameLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/GetFrameLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetFrameLogs(ctx, req.(*GetFrameLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Node_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Node_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Node_Delete_Handler,
		},
		{
			MethodName: "ListByApplicationID",
			Handler:    _Node_ListByApplicationID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Node_Update_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Node_Activate_Handler,
		},
		{
			MethodName: "GetActivation",
			Handler:    _Node_GetActivation_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _Node_GetRandomDevAddr_Handler,
		},
		{
			MethodName: "GetFrameLogs",
			Handler:    _Node_GetFrameLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x06, 0xf5, 0x65, 0x79, 0x6c, 0xd9, 0xce, 0x5a, 0x71, 0x18, 0xc5, 0x31, 0x04, 0xfa, 0x7d,
	0x53, 0x39, 0x2d, 0x2c, 0xd4, 0x2d, 0x7a, 0xe8, 0x4d, 0x91, 0x1a, 0xd7, 0xcd, 0x97, 0xb1, 0x6e,
	0x9a, 0x06, 0x45, 0x81, 0x6e, 0xc4, 0x95, 0xc2, 0x96, 0xdc, 0x65, 0xc9, 0xb5, 0x2d, 0x21, 0xc8,
	0x25, 0x87, 0x9e, 0x8a, 0x5e, 0x7a, 0x2e, 0x50, 0xf4, 0x0f, 0xf4, 0xc7, 0x14, 0xfd, 0x07, 0xfd,
	0x13, 0xbd, 0x15, 0xfb, 0x41, 0x8a, 0x92, 0x28, 0x3b, 0x87, 0xf6, 0xe6, 0x93, 0x39, 0xcf, 0x2c,
	0x67, 0xe6, 0x59, 0x3e, 0x3b, 0xb3, 0x32, 0x00, 0xe3, 0x2e, 0xdd, 0x0f, 0x23, 0x2e, 0x38, 0x2a,
	0x92, 0xd0, 0x6b, 0x6c, 0x0f, 0x39, 0x1f, 0xfa, 0xb4, 0x4d, 0x42, 0xaf, 0x4d, 0x18, 0xe3, 0x82,
	0x08, 0x8f, 0xb3, 0x58, 0x2f, 0x69, 0xac, 0xf6, 0x79, 0x10, 0x70, 0xa6, 0x2d, 0xe7, 0xa7, 0x12,
	0x5c, 0xeb, 0x46, 0x94, 0x08, 0xfa, 0x98, 0xbb, 0x14, 0xd3, 0xef, 0x4f, 0x69, 0x2c, 0xd0, 0x16,
	0x54, 0x5c, 0x7a, 0xf6, 0xc9, 0xd3, 0x23, 0xdb, 0x6a, 0x5a, 0xad, 0x65, 0x6c, 0x2c, 0x89, 0x93,
	0x30, 0x94, 0x78, 0x41, 0xe3, 0xda, 0x32, 0xf8, 0x03, 0x3a, 0xb6, 0x8b, 0x29, 0xfe, 0x80, 0x8e,
	0x91, 0x0d, 0x4b, 0xd1, 0xa8, 0x47, 0x7d, 0x32, 0xb6, 0x4b, 0x4d, 0xab, 0x55, 0xc3, 0x89, 0x89,
	0x9a, 0xb0, 0x12, 0x8d, 0xde, 0xef, 0xe1, 0x27, 0x83, 0x41, 0x4c, 0x85, 0x5d, 0x56, 0xde, 0x2c,
	0x84, 0xf6, 0xa0, 0x1a, 0x8d, 0x9e, 0x79, 0xcc, 0xe5, 0xe7, 0xf6, 0x52, 0xd3, 0x6a, 0xad, 0x1d,
	0xd4, 0xf6, 0x49, 0xe8, 0xed, 0xe3, 0x2f, 0x35, 0x88, 0x53, 0x37, 0xaa, 0x43, 0x39, 0x1a, 0x1d,
	0xf4, 0xb0, 0x5d, 0x55, 0x61, 0xb4, 0x81, 0x10, 0x94, 0x18, 0x09, 0xa8, 0xbd, 0xac, 0x4a, 0x52,
	0xcf, 0x68, 0x1b, 0x96, 0x23, 0xea, 0x93, 0xd1, 0xfd, 0x2e, 0x13, 0x36, 0x34, 0xad, 0x56, 0x15,
	0x4f, 0x00, 0x59, 0x14, 0x71, 0xa3, 0x23, 0x26, 0x68, 0x74, 0x46, 0x7c, 0x7b, 0x45, 0x17, 0x95,
	0x81, 0xd0, 0x3e, 0x20, 0x8f, 0xc5, 0x82, 0xf8, 0xbe, 0xda, 0xd3, 0x47, 0x24, 0x1a, 0x7a, 0xcc,
	0x5e, 0x6d, 0x5a, 0x2d, 0x0b, 0xe7, 0x78, 0xd0, 0xff, 0xa0, 0x46, 0xc2, 0xd0, 0xf7, 0xfa, 0x0a,
	0x3c, 0xea, 0xd9, 0xb5, 0xa6, 0xd5, 0x2a, 0xe2, 0x69, 0x50, 0xe6, 0x75, 0x69, 0xdc, 0x8f, 0xbc,
	0x50, 0x02, 0xf6, 0x9a, 0x2a, 0x38, 0x0b, 0x49, 0x86, 0x5e, 0xdc, 0xb9, 0x77, 0x6c, 0xaf, 0xab,
	0x9a, 0xb5, 0x81, 0x1a, 0x50, 0xf5, 0xe2, 0xae, 0x4f, 0xe2, 0xb8, 0x6b, 0x6f, 0x28, 0x47, 0x6a,
	0xa3, 0x8f, 0x60, 0xeb, 0x34, 0xa6, 0x9d, 0x49, 0x9e, 0x13, 0x2a, 0x84, 0xc7, 0x86, 0xb1, 0x7d,
	0x4d, 0xad, 0x5c, 0xe0, 0x75, 0xea, 0x80, 0xb2, 0x7a, 0x88, 0x43, 0xce, 0x62, 0xea, 0xb4, 0x60,
	0xed, 0x90, 0x8a, 0xb7, 0x90, 0x88, 0xf3, 0x63, 0x09, 0xd6, 0xd3, 0xa5, 0xfa, 0xed, 0x2b, 0x39,
	0xfd, 0x5b, 0x72, 0x9a, 0x11, 0x4a, 0xed, 0x02, 0xa1, 0xac, 0x65, 0x85, 0x32, 0x27, 0xc3, 0xf5,
	0x3c, 0x19, 0xfe, 0x17, 0x72, 0x7a, 0x17, 0xae, 0xf5, 0xa8, 0x4f, 0xdf, 0xaa, 0xbd, 0x48, 0xed,
	0x65, 0x17, 0x1b, 0xed, 0x09, 0xd8, 0x79, 0xe8, 0xc5, 0x4a, 0x51, 0xf7, 0xc6, 0x9d, 0x6c, 0xc5,
	0x49, 0xbc, 0x39, 0x7a, 0xc5, 0x3c, 0x7a, 0x75, 0x28, 0xfb, 0x5e, 0xe0, 0x09, 0x95, 0xb4, 0x88,
	0xb5, 0x21, 0x6b, 0xe1, 0x5a, 0x34, 0x05, 0x05, 0x1b, 0xcb, 0xf9, 0x06, 0x36, 0x92, 0xac, 0xa9,
	0x8e, 0x77, 0x00, 0x04, 0x17, 0xc4, 0xef, 0xf2, 0x53, 0x96, 0x84, 0xc9, 0x20, 0xe8, 0x3d, 0xa8,
	0x44, 0x34, 0x3e, 0xf5, 0x65, 0xac, 0x62, 0x6b, 0xe5, 0xa0, 0xae, 0x14, 0x36, 0x73, 0x1a, 0xb0,
	0x59, 0xa3, 0x5a, 0xef, 0xd3, 0xd0, 0xbd, 0x6a, 0xbd, 0x57, 0xad, 0x37, 0x6d, 0xbd, 0x59, 0x3d,
	0x18, 0xf9, 0xff, 0x6e, 0xc1, 0x66, 0xa7, 0x2f, 0xbc, 0xb3, 0xb7, 0x14, 0x8a, 0x0d, 0x4b, 0x2e,
	0x3d, 0xeb, 0xb8, 0x6e, 0x64, 0x94, 0x92, 0x98, 0xd2, 0x43, 0xc2, 0xf0, 0x64, 0xa2, 0x95, 0xc4,
	0x94, 0x1e, 0x76, 0xfe, 0x9d, 0xf2, 0x94, 0xb4, 0xc7, 0x98, 0x32, 0xcb, 0xa0, 0xcb, 0xc4, 0xd3,
	0xd0, 0xe8, 0xc4, 0x58, 0x92, 0xbf, 0x7c, 0xea, 0xf1, 0x73, 0x66, 0x57, 0x94, 0x27, 0xb5, 0x9d,
	0x2d, 0xa8, 0x4f, 0x17, 0x6c, 0x98, 0x1c, 0x80, 0x6d, 0xce, 0x82, 0x71, 0x7b, 0x9c, 0x5d, 0xd6,
	0x12, 0x7e, 0xb1, 0xe0, 0x66, 0xce, 0x4b, 0xe6, 0x40, 0x66, 0xb8, 0x5a, 0x0b, 0xb9, 0x16, 0x16,
	0x72, 0x2d, 0x2e, 0xe2, 0x5a, 0x5a, 0xc8, 0xb5, 0x3c, 0xc3, 0xf5, 0x26, 0xdc, 0x38, 0xa4, 0x02,
	0x13, 0xe6, 0xf2, 0xa0, 0xa7, 0x73, 0x1b, 0x4a, 0xce, 0x87, 0x8a, 0xee, 0x8c, 0xeb, 0xb2, 0xc2,
	0x9d, 0xaf, 0x60, 0xf3, 0x90, 0x8a, 0xfb, 0x11, 0x09, 0xe8, 0x43, 0x3e, 0x8c, 0x2f, 0xfb, 0xda,
	0x69, 0x53, 0x2b, 0xe4, 0x37, 0xb5, 0xe2, 0x54, 0x53, 0xfb, 0x1a, 0xea, 0xd3, 0xc1, 0x17, 0x36,
	0xb6, 0xf2, 0x54, 0x63, 0xfb, 0xff, 0x4c, 0x63, 0xd3, 0xed, 0x20, 0x89, 0x93, 0x76, 0xb4, 0x5f,
	0x2d, 0xa8, 0x26, 0xa0, 0x3c, 0xef, 0x7d, 0x75, 0x91, 0x70, 0x3b, 0xc2, 0x14, 0x3d, 0x01, 0xd0,
	0x1e, 0x2c, 0x47, 0xa3, 0x23, 0x36, 0xe0, 0x27, 0x34, 0x09, 0xba, 0x62, 0x7a, 0x8c, 0x44, 0xf1,
	0xc4, 0x8b, 0x76, 0xa1, 0x22, 0x94, 0xa1, 0xc8, 0x24, 0xeb, 0x3e, 0xd7, 0xeb, 0x8c, 0x0b, 0xdd,
	0x81, 0xb5, 0xf0, 0xe5, 0xf8, 0x98, 0x8c, 0x7d, 0x4e, 0xdc, 0xcf, 0x4e, 0x9e, 0x3c, 0x36, 0x42,
	0x9e, 0x41, 0x9d, 0x1f, 0x2c, 0xa8, 0xf6, 0x88, 0x20, 0x98, 0x08, 0x45, 0x3b, 0xe0, 0xee, 0xa9,
	0x6e, 0x1b, 0xa6, 0xc6, 0x0c, 0x22, 0x29, 0xbc, 0x20, 0xcc, 0x7d, 0xe6, 0xb9, 0xe2, 0xa5, 0xda,
	0xe0, 0x1a, 0x9e, 0x00, 0xc8, 0x81, 0xd5, 0x38, 0x8c, 0x28, 0x71, 0xef, 0x93, 0xbe, 0xe0, 0x91,
	0xaa, 0xae, 0x86, 0xa7, 0x30, 0xf9, 0x9d, 0x5f, 0x78, 0x22, 0x22, 0x82, 0x26, 0x5d, 0xd8, 0x98,
	0xce, 0xdf, 0x16, 0x54, 0x34, 0x57, 0xb9, 0xa8, 0xff, 0x92, 0x30, 0x46, 0x7d, 0xb3, 0xf5, 0x89,
	0x29, 0x95, 0xd7, 0x97, 0x27, 0x48, 0xbe, 0xaf, 0x65, 0x9c, 0xda, 0xb2, 0xb8, 0x41, 0x24, 0xd5,
	0xc1, 0xfa, 0x63, 0xf3, 0x99, 0x27, 0x80, 0x8c, 0xe9, 0x73, 0x4c, 0x4e, 0x1e, 0x63, 0x95, 0xd8,
	0xc2, 0x89, 0x29, 0x7b, 0x73, 0x14, 0xc7, 0x9e, 0x52, 0x72, 0x19, 0xab, 0x67, 0x89, 0x09, 0x2f,
	0xa0, 0xea, 0x24, 0x2f, 0x63, 0xf5, 0x2c, 0xe3, 0xcb, 0xbf, 0xb1, 0x20, 0x41, 0xa8, 0xa6, 0x40,
	0x0d, 0x4f, 0x00, 0x39, 0x22, 0x5c, 0xb3, 0x8d, 0xaa, 0xf5, 0x27, 0x9a, 0x48, 0xf6, 0x16, 0xa7,
	0x6e, 0xb4, 0x01, 0xc5, 0x80, 0xf4, 0xcd, 0x2c, 0x90, 0x8f, 0xce, 0x9f, 0x16, 0x54, 0xf4, 0xf7,
	0x9b, 0x62, 0x68, 0x5d, 0xc4, 0xb0, 0x30, 0xcb, 0xb0, 0x09, 0x2b, 0x5e, 0x10, 0x50, 0xd7, 0x23,
	0x82, 0xfa, 0x7a, 0x07, 0xaa, 0x38, 0x0b, 0x25, 0x89, 0x4b, 0x69, 0x62, 0x79, 0x5a, 0x42, 0x7e,
	0x4e, 0x23, 0x43, 0x5e, 0x1b, 0xd3, 0x4c, 0x2b, 0x17, 0x31, 0x5d, 0xba, 0x90, 0xa9, 0xb3, 0x0a,
	0x70, 0xfc, 0xe9, 0x73, 0x23, 0xb7, 0x83, 0xdf, 0x96, 0xa0, 0x24, 0xfb, 0x16, 0x3a, 0x86, 0x8a,
	0xbe, 0x52, 0xa3, 0x2d, 0xf5, 0xe6, 0xdc, 0xef, 0xad, 0xc6, 0x8d, 0x39, 0xdc, 0xb4, 0xcc, 0xeb,
	0x6f, 0xfe, 0xf8, 0xeb, 0xe7, 0xc2, 0xba, 0x03, 0xea, 0xc7, 0x9c, 0xfc, 0xa1, 0x17, 0x7f, 0x6c,
	0xdd, 0x45, 0x8f, 0xa0, 0x78, 0x48, 0x05, 0xda, 0x9c, 0xbe, 0x5f, 0xe8, 0x58, 0xb9, 0x97, 0x0e,
	0xe7, 0x96, 0x0a, 0x74, 0x1d, 0x6d, 0x4e, 0x02, 0xb5, 0x5f, 0xe9, 0x1e, 0xf2, 0x1a, 0x7d, 0x01,
	0x15, 0x7d, 0xef, 0x32, 0x05, 0xce, 0xdd, 0xd8, 0x4c, 0x81, 0x39, 0x97, 0x33, 0x13, 0xf7, 0x6e,
	0x6e, 0xdc, 0x37, 0x16, 0x6c, 0xca, 0x4b, 0xd4, 0xcc, 0xb5, 0x0d, 0xed, 0xaa, 0x68, 0x17, 0x5f,
	0xea, 0x1a, 0xd7, 0xa7, 0x16, 0xa5, 0x09, 0xdb, 0x2a, 0xe1, 0x1e, 0x7a, 0x47, 0xff, 0xbc, 0x9d,
	0xbc, 0x19, 0xb7, 0x5f, 0x4d, 0x8d, 0xf6, 0xd7, 0xba, 0x1a, 0xf4, 0x1c, 0x2a, 0x7a, 0xaa, 0x1a,
	0x72, 0x73, 0x57, 0x2e, 0x43, 0x2e, 0x67, 0xf4, 0xee, 0xa8, 0x5c, 0x76, 0x23, 0x8f, 0x9c, 0xfc,
	0x0c, 0xdf, 0x42, 0x35, 0x19, 0x74, 0xc8, 0x56, 0x41, 0x72, 0x06, 0x75, 0xe3, 0x66, 0x8e, 0xc7,
	0x24, 0xd8, 0x53, 0x09, 0x76, 0x9d, 0x9d, 0x9c, 0x04, 0x6d, 0x92, 0xce, 0x3b, 0x99, 0xeb, 0x0c,
	0x6a, 0x87, 0x54, 0x4c, 0x66, 0x20, 0xba, 0x9d, 0xfd, 0xce, 0x73, 0x03, 0xb5, 0xb1, 0xb3, 0xc8,
	0x6d, 0x52, 0xdf, 0x51, 0xa9, 0x9b, 0xe8, 0x92, 0xd4, 0x48, 0xc0, 0xc6, 0xec, 0x14, 0x43, 0xdb,
	0x49, 0xec, 0xbc, 0xb9, 0xd7, 0xb8, 0xbd, 0xc0, 0x6b, 0x12, 0xef, 0xaa, 0xc4, 0xb7, 0x9d, 0x5b,
	0x99, 0xc4, 0xc3, 0xd9, 0x0c, 0x43, 0x58, 0xcd, 0x0e, 0x2a, 0xb3, 0xbb, 0x39, 0x83, 0xd1, 0xec,
	0x6e, 0xde, 0x54, 0x73, 0x1c, 0x95, 0x69, 0x1b, 0x35, 0xf2, 0x28, 0x0e, 0xe4, 0xf2, 0xf8, 0x45,
	0x45, 0xfd, 0x1b, 0xe4, 0x83, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xee, 0xfe, 0x04, 0x45,
	0x11, 0x00, 0x00,
}
