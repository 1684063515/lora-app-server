// Code generated by protoc-gen-go.
// source: node.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateNodeRequest struct {
	// hex encoded DevEUI
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// hex encoded AppEUI
	AppEUI string `protobuf:"bytes,2,opt,name=appEUI" json:"appEUI,omitempty"`
	// hex encoded AppKey
	AppKey             string   `protobuf:"bytes,3,opt,name=appKey" json:"appKey,omitempty"`
	RxDelay            uint32   `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	Rx1DROffset        uint32   `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	ChannelListID      int64    `protobuf:"varint,6,opt,name=channelListID" json:"channelListID,omitempty"`
	RxWindow           RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	Rx2DR              uint32   `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	Name               string   `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	RelaxFCnt          bool     `protobuf:"varint,10,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	AdrInterval        uint32   `protobuf:"varint,11,opt,name=adrInterval" json:"adrInterval,omitempty"`
	InstallationMargin float64  `protobuf:"fixed64,12,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// name of the application to which the node must be linked
	ApplicationName string `protobuf:"bytes,13,opt,name=applicationName" json:"applicationName,omitempty"`
	Description     string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
}

func (m *CreateNodeRequest) Reset()                    { *m = CreateNodeRequest{} }
func (m *CreateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeRequest) ProtoMessage()               {}
func (*CreateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateNodeRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *CreateNodeRequest) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *CreateNodeRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *CreateNodeRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *CreateNodeRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *CreateNodeRequest) GetChannelListID() int64 {
	if m != nil {
		return m.ChannelListID
	}
	return 0
}

func (m *CreateNodeRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *CreateNodeRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *CreateNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateNodeRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *CreateNodeRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *CreateNodeRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *CreateNodeRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *CreateNodeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateNodeResponse struct {
}

func (m *CreateNodeResponse) Reset()                    { *m = CreateNodeResponse{} }
func (m *CreateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeResponse) ProtoMessage()               {}
func (*CreateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type GetNodeRequest struct {
	// name of the node
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// name of the application to which the node is linked
	ApplicationName string `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
}

func (m *GetNodeRequest) Reset()                    { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()               {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetNodeRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

type GetNodeResponse struct {
	// hex encoded DevEUI
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// hex encoded AppEUI
	AppEUI string `protobuf:"bytes,2,opt,name=appEUI" json:"appEUI,omitempty"`
	// hex encoded AppKey
	AppKey             string   `protobuf:"bytes,3,opt,name=appKey" json:"appKey,omitempty"`
	RxDelay            uint32   `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	Rx1DROffset        uint32   `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	ChannelListID      int64    `protobuf:"varint,6,opt,name=channelListID" json:"channelListID,omitempty"`
	RxWindow           RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	Rx2DR              uint32   `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	Name               string   `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	RelaxFCnt          bool     `protobuf:"varint,10,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	AdrInterval        uint32   `protobuf:"varint,11,opt,name=adrInterval" json:"adrInterval,omitempty"`
	InstallationMargin float64  `protobuf:"fixed64,12,opt,name=installationMargin" json:"installationMargin,omitempty"`
	Description        string   `protobuf:"bytes,13,opt,name=description" json:"description,omitempty"`
}

func (m *GetNodeResponse) Reset()                    { *m = GetNodeResponse{} }
func (m *GetNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeResponse) ProtoMessage()               {}
func (*GetNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetNodeResponse) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *GetNodeResponse) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *GetNodeResponse) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *GetNodeResponse) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *GetNodeResponse) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *GetNodeResponse) GetChannelListID() int64 {
	if m != nil {
		return m.ChannelListID
	}
	return 0
}

func (m *GetNodeResponse) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *GetNodeResponse) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *GetNodeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetNodeResponse) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *GetNodeResponse) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *GetNodeResponse) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *GetNodeResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type DeleteNodeRequest struct {
	// name of the node
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// name of the application to which the node is linked
	ApplicationName string `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
}

func (m *DeleteNodeRequest) Reset()                    { *m = DeleteNodeRequest{} }
func (m *DeleteNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeRequest) ProtoMessage()               {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DeleteNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteNodeRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

type DeleteNodeResponse struct {
}

func (m *DeleteNodeResponse) Reset()                    { *m = DeleteNodeResponse{} }
func (m *DeleteNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeResponse) ProtoMessage()               {}
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type ListNodeRequest struct {
	Limit  int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// name of the application for which to list the nodes
	ApplicationName string `protobuf:"bytes,3,opt,name=applicationName" json:"applicationName,omitempty"`
}

func (m *ListNodeRequest) Reset()                    { *m = ListNodeRequest{} }
func (m *ListNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodeRequest) ProtoMessage()               {}
func (*ListNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ListNodeRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListNodeRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListNodeRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

type ListNodeResponse struct {
	TotalCount int64              `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	Result     []*GetNodeResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListNodeResponse) Reset()                    { *m = ListNodeResponse{} }
func (m *ListNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodeResponse) ProtoMessage()               {}
func (*ListNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ListNodeResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListNodeResponse) GetResult() []*GetNodeResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateNodeRequest struct {
	// hex encoded AppEUI
	AppEUI string `protobuf:"bytes,2,opt,name=appEUI" json:"appEUI,omitempty"`
	// hex encoded AppKey
	AppKey             string   `protobuf:"bytes,3,opt,name=appKey" json:"appKey,omitempty"`
	RxDelay            uint32   `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	Rx1DROffset        uint32   `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	ChannelListID      int64    `protobuf:"varint,6,opt,name=channelListID" json:"channelListID,omitempty"`
	RxWindow           RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	Rx2DR              uint32   `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	Name               string   `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	RelaxFCnt          bool     `protobuf:"varint,10,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	AdrInterval        uint32   `protobuf:"varint,11,opt,name=adrInterval" json:"adrInterval,omitempty"`
	InstallationMargin float64  `protobuf:"fixed64,12,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// name of the application to which the node is linked
	ApplicationName string `protobuf:"bytes,13,opt,name=applicationName" json:"applicationName,omitempty"`
	Description     string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateNodeRequest) Reset()                    { *m = UpdateNodeRequest{} }
func (m *UpdateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeRequest) ProtoMessage()               {}
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *UpdateNodeRequest) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *UpdateNodeRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *UpdateNodeRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *UpdateNodeRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *UpdateNodeRequest) GetChannelListID() int64 {
	if m != nil {
		return m.ChannelListID
	}
	return 0
}

func (m *UpdateNodeRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *UpdateNodeRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *UpdateNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateNodeRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *UpdateNodeRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *UpdateNodeRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *UpdateNodeRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *UpdateNodeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UpdateNodeResponse struct {
}

func (m *UpdateNodeResponse) Reset()                    { *m = UpdateNodeResponse{} }
func (m *UpdateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeResponse) ProtoMessage()               {}
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func init() {
	proto.RegisterType((*CreateNodeRequest)(nil), "api.CreateNodeRequest")
	proto.RegisterType((*CreateNodeResponse)(nil), "api.CreateNodeResponse")
	proto.RegisterType((*GetNodeRequest)(nil), "api.GetNodeRequest")
	proto.RegisterType((*GetNodeResponse)(nil), "api.GetNodeResponse")
	proto.RegisterType((*DeleteNodeRequest)(nil), "api.DeleteNodeRequest")
	proto.RegisterType((*DeleteNodeResponse)(nil), "api.DeleteNodeResponse")
	proto.RegisterType((*ListNodeRequest)(nil), "api.ListNodeRequest")
	proto.RegisterType((*ListNodeResponse)(nil), "api.ListNodeResponse")
	proto.RegisterType((*UpdateNodeRequest)(nil), "api.UpdateNodeRequest")
	proto.RegisterType((*UpdateNodeResponse)(nil), "api.UpdateNodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	// Create creates the given node.
	Create(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	// Get returns the node for the requested name.
	Get(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// Delete deletes the node matching the given name.
	Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	// List lists the nodes.
	List(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
	// Update updates the node matching the given name.
	Update(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Create(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Get(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	out := new(DeleteNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) List(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	out := new(ListNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Update(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := grpc.Invoke(ctx, "/api.Node/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	// Create creates the given node.
	Create(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	// Get returns the node for the requested name.
	Get(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// Delete deletes the node matching the given name.
	Delete(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	// List lists the nodes.
	List(context.Context, *ListNodeRequest) (*ListNodeResponse, error)
	// Update updates the node matching the given name.
	Update(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Create(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Get(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Delete(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).List(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Update(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Node_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Node_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Node_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Node_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Node_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0xdd, 0x4e, 0xd4, 0x40,
	0x18, 0x4d, 0xb7, 0x4b, 0x81, 0x0f, 0x16, 0x64, 0x5c, 0x71, 0xb2, 0x21, 0xa6, 0x69, 0xbc, 0x28,
	0x68, 0x76, 0x65, 0xd5, 0xc4, 0xe0, 0x25, 0xab, 0x84, 0xa0, 0x18, 0x9b, 0x10, 0xbd, 0x74, 0xdc,
	0x0e, 0x38, 0xa6, 0x3b, 0x53, 0xdb, 0x01, 0x97, 0x10, 0x6e, 0x7c, 0x05, 0xdf, 0xc0, 0x87, 0x30,
	0x3e, 0x85, 0x37, 0xbe, 0x82, 0x0f, 0x62, 0xe6, 0x07, 0xe8, 0xb6, 0xbd, 0x80, 0x98, 0x18, 0x2f,
	0xb8, 0xdb, 0xef, 0xcc, 0xa4, 0xe7, 0x7c, 0x73, 0xce, 0x37, 0xb3, 0x00, 0x5c, 0xc4, 0xb4, 0x9b,
	0x66, 0x42, 0x0a, 0xe4, 0x92, 0x94, 0x75, 0x56, 0x0e, 0x84, 0x38, 0x48, 0x68, 0x8f, 0xa4, 0xac,
	0x47, 0x38, 0x17, 0x92, 0x48, 0x26, 0x78, 0x6e, 0xb6, 0x74, 0xe6, 0x87, 0x62, 0x34, 0x12, 0xdc,
	0x54, 0xc1, 0x4f, 0x17, 0x96, 0x36, 0x33, 0x4a, 0x24, 0xdd, 0x15, 0x31, 0x8d, 0xe8, 0xa7, 0x43,
	0x9a, 0x4b, 0xb4, 0x0c, 0x5e, 0x4c, 0x8f, 0x9e, 0xed, 0x6d, 0x63, 0xc7, 0x77, 0xc2, 0xd9, 0xc8,
	0x56, 0x0a, 0x27, 0x69, 0xaa, 0xf0, 0x86, 0xc1, 0x4d, 0x65, 0xf1, 0x1d, 0x7a, 0x8c, 0xdd, 0x73,
	0x7c, 0x87, 0x1e, 0x23, 0x0c, 0xd3, 0xd9, 0x78, 0x40, 0x13, 0x72, 0x8c, 0x9b, 0xbe, 0x13, 0xb6,
	0xa2, 0xb3, 0x12, 0xf9, 0x30, 0x97, 0x8d, 0xd7, 0x07, 0xd1, 0xab, 0xfd, 0xfd, 0x9c, 0x4a, 0x3c,
	0xa5, 0x57, 0x8b, 0x10, 0xba, 0x0b, 0xad, 0xe1, 0x07, 0xc2, 0x39, 0x4d, 0x5e, 0xb0, 0x5c, 0x6e,
	0x0f, 0xb0, 0xe7, 0x3b, 0xa1, 0x1b, 0x4d, 0x82, 0x68, 0x15, 0x66, 0xb2, 0xf1, 0x1b, 0xc6, 0x63,
	0xf1, 0x19, 0x4f, 0xfb, 0x4e, 0xb8, 0xd0, 0x6f, 0x75, 0x49, 0xca, 0xba, 0xd1, 0x5b, 0x03, 0x46,
	0xe7, 0xcb, 0xa8, 0x0d, 0x53, 0xd9, 0xb8, 0x3f, 0x88, 0xf0, 0x8c, 0x26, 0x33, 0x05, 0x42, 0xd0,
	0xe4, 0x64, 0x44, 0xf1, 0xac, 0x16, 0xae, 0x7f, 0xa3, 0x15, 0x98, 0xcd, 0x68, 0x42, 0xc6, 0xcf,
	0x37, 0xb9, 0xc4, 0xe0, 0x3b, 0xe1, 0x4c, 0x74, 0x01, 0x28, 0xe9, 0x24, 0xce, 0xb6, 0xb9, 0xa4,
	0xd9, 0x11, 0x49, 0xf0, 0x9c, 0x91, 0x5e, 0x80, 0x50, 0x17, 0x10, 0xe3, 0xb9, 0x24, 0x49, 0xa2,
	0x4f, 0xfe, 0x25, 0xc9, 0x0e, 0x18, 0xc7, 0xf3, 0xbe, 0x13, 0x3a, 0x51, 0xcd, 0x0a, 0x0a, 0x61,
	0x91, 0xa4, 0x69, 0xc2, 0x86, 0x1a, 0xdc, 0x55, 0x72, 0x5a, 0x5a, 0x4e, 0x19, 0x56, 0xdc, 0x31,
	0xcd, 0x87, 0x19, 0x4b, 0x15, 0x84, 0x17, 0xf4, 0xae, 0x22, 0x14, 0xb4, 0x01, 0x15, 0xfd, 0xcc,
	0x53, 0xc1, 0x73, 0x1a, 0xec, 0xc2, 0xc2, 0x16, 0x95, 0x45, 0x8b, 0xcf, 0xfa, 0x76, 0x0a, 0x7d,
	0xd7, 0xe8, 0x68, 0xd4, 0xea, 0x08, 0xbe, 0xb9, 0xb0, 0x78, 0xfe, 0x41, 0xc3, 0x71, 0x1d, 0x9a,
	0x7f, 0x1b, 0x9a, 0x52, 0x14, 0x5a, 0xd5, 0x28, 0xbc, 0x86, 0xa5, 0x01, 0x4d, 0xe8, 0xe4, 0x68,
	0xff, 0x9d, 0xef, 0x6d, 0x40, 0xc5, 0x4f, 0xda, 0x74, 0x31, 0x58, 0x54, 0x27, 0x5b, 0xa4, 0x69,
	0xc3, 0x54, 0xc2, 0x46, 0x4c, 0x6a, 0x1e, 0x37, 0x32, 0x85, 0xb2, 0x5c, 0x18, 0xef, 0x1a, 0x1a,
	0xb6, 0x55, 0x9d, 0x00, 0xb7, 0x5e, 0xc0, 0x3b, 0xb8, 0x71, 0x41, 0x65, 0x83, 0x77, 0x07, 0x40,
	0x0a, 0x49, 0x92, 0x4d, 0x71, 0xc8, 0xcf, 0x08, 0x0b, 0x08, 0xba, 0x0f, 0x5e, 0x46, 0xf3, 0xc3,
	0x44, 0xb1, 0xba, 0xe1, 0x5c, 0xbf, 0xad, 0xcd, 0x2e, 0xc5, 0x37, 0xb2, 0x7b, 0x82, 0xef, 0x2e,
	0x2c, 0xed, 0xa5, 0x71, 0xf5, 0x46, 0xbc, 0x0e, 0xf1, 0x7f, 0x7f, 0xf3, 0x15, 0x7d, 0x33, 0xb6,
	0xf6, 0x7f, 0x34, 0xa1, 0xa9, 0x00, 0x24, 0xc0, 0x33, 0x17, 0x23, 0x5a, 0xd6, 0xe7, 0x54, 0x79,
	0xf5, 0x3a, 0xb7, 0x2b, 0xb8, 0xcd, 0xf7, 0xa3, 0x2f, 0xbf, 0x7e, 0x7f, 0x6d, 0x74, 0x83, 0x55,
	0xf3, 0xa4, 0x5e, 0x28, 0xcb, 0x7b, 0x27, 0x25, 0x9d, 0xa7, 0x3d, 0xf5, 0x1a, 0xe7, 0x1b, 0xce,
	0x1a, 0xfa, 0x08, 0xee, 0x16, 0x95, 0xe8, 0xe6, 0x64, 0xda, 0x0c, 0x55, 0x6d, 0x04, 0x83, 0x27,
	0x9a, 0xa7, 0x8f, 0x1e, 0x5c, 0x9a, 0xa7, 0x77, 0xa2, 0x6c, 0x3b, 0x45, 0x39, 0x78, 0x66, 0x2e,
	0x6d, 0x73, 0x95, 0xb9, 0xb7, 0xcd, 0xd5, 0x0c, 0xaf, 0x25, 0x5d, 0xbb, 0x3a, 0xe9, 0x3e, 0x34,
	0x55, 0x16, 0x91, 0x69, 0xa6, 0x74, 0x03, 0x74, 0x6e, 0x95, 0x50, 0x4b, 0xb7, 0xae, 0xe9, 0xee,
	0xa1, 0xcb, 0x9f, 0x25, 0x3a, 0x02, 0xcf, 0x18, 0x6b, 0x9b, 0xab, 0x4c, 0xa7, 0x6d, 0xae, 0xea,
	0x7e, 0xf0, 0x54, 0xb3, 0x3d, 0xee, 0x5c, 0xb9, 0xb9, 0x0d, 0x67, 0xed, 0xbd, 0xa7, 0xff, 0x22,
	0x3d, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xef, 0x9c, 0xf7, 0x61, 0x09, 0x00, 0x00,
}
