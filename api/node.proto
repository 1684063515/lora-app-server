syntax = "proto3";

package api;

// for grpc-gateway
import "google/api/annotations.proto";
import "common.proto";

// Node is the service managing the nodes.
service Node {
    // Create creates the given node.
    rpc Create(CreateNodeRequest) returns (CreateNodeResponse) {
        option(google.api.http) = {
            post: "/api/applications/{applicationName}/nodes"
            body: "*"
        };
    }

    // Get returns the node for the requested name.
    rpc Get(GetNodeRequest) returns (GetNodeResponse) {
        option (google.api.http) = {
            get: "/api/applications/{applicationName}/nodes/{nodeName}"
        };
    }

    // Delete deletes the node matching the given name.
    rpc Delete(DeleteNodeRequest) returns (DeleteNodeResponse) {
        option (google.api.http) = {
            delete: "/api/applications/{applicationName}/nodes/{nodeName}"
        };
    }

    // List lists the nodes.
    rpc List(ListNodeRequest) returns (ListNodeResponse) {
        option (google.api.http) = {
            get: "/api/applications/{applicationName}/nodes"
        };
    }

    // Update updates the node matching the given name.
    rpc Update(UpdateNodeRequest) returns (UpdateNodeResponse) {
        option (google.api.http) = {
            put: "/api/applications/{applicationName}/nodes/{nodeName}"
            body: "*"
        };
    }
}

message CreateNodeRequest {
	// name of the application to which the node belongs
	string applicationName = 13;

    // hex encoded DevEUI
    string devEUI = 1; 
    // hex encoded AppEUI
    string appEUI = 2; 
    // hex encoded AppKey
    string appKey = 3; 
    uint32 rxDelay = 4;
    uint32 rx1DROffset = 5;
    int64 channelListID = 6;
    RXWindow rxWindow = 7;
    uint32 rx2DR = 8;
    string name = 9;
	bool relaxFCnt = 10;
	uint32 adrInterval = 11;
	double installationMargin = 12;
	string description = 14;
}

message CreateNodeResponse {}

message GetNodeRequest {
	// name of the application to which the node belongs
	string applicationName = 2;

    // name of the node
    string nodeName = 1;
}

message GetNodeResponse {
    // hex encoded DevEUI
    string devEUI = 1; 
    // hex encoded AppEUI
    string appEUI = 2; 
    // hex encoded AppKey
    string appKey = 3; 
    uint32 rxDelay = 4;
    uint32 rx1DROffset = 5;
    int64 channelListID = 6;
    RXWindow rxWindow = 7;
    uint32 rx2DR = 8;
    string name = 9;
	bool relaxFCnt = 10;
	uint32 adrInterval = 11;
	double installationMargin = 12;
	string description = 13;
};

message DeleteNodeRequest {
	// name of the application to which the node belongs
	string applicationName = 2;

    // name of the node
    string nodeName = 1;
}

message DeleteNodeResponse {}

message ListNodeRequest {
	// name of the application for which to list the nodes
	string applicationName = 3;

    int64 limit = 1;
    int64 offset = 2;
}

message ListNodeResponse {
    int64 totalCount = 1;
    repeated GetNodeResponse result = 2;
}


message UpdateNodeRequest {
	// name of the application to which the node is linked
	string applicationName = 13;
	// name of the node to update 
	string nodeName = 14;

    // hex encoded AppEUI
    string appEUI = 2;
    // hex encoded AppKey
    string appKey = 3;
    uint32 rxDelay = 4;
    uint32 rx1DROffset = 5;
    int64 channelListID = 6;
    RXWindow rxWindow = 7;
    uint32 rx2DR = 8;
	// new name of the node (e.g. in case the node has been renamed)
    string name = 9;
	bool relaxFCnt = 10;
	uint32 adrInterval = 11;
	double installationMargin = 12;
	string description = 15;
}

message UpdateNodeResponse {}
