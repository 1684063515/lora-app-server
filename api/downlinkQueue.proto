syntax = "proto3";

package api;

// for grpc-gateway
import "google/api/annotations.proto";

// DownlinkQueue is the service managing the downlink data queue.
service DownlinkQueue {
    // Enqueue adds the given item to the queue.
    rpc Enqueue(EnqueueDownlinkQueueItemRequest) returns (EnqueueDownlinkQueueItemResponse) {
        option(google.api.http) = {
            post: "/api/applications/{applicationName}/nodes/{devEUI}/queue"
            body: "*"
        };
    }

    // Delete deletes an item from the queue.
    rpc Delete(DeleteDownlinkQeueueItemRequest) returns (DeleteDownlinkQueueItemResponse) {
        option(google.api.http) = {
            delete: "/api/applications/{applicationName}/nodes/{devEUI}/queue/{id}"
        };
    }

    // List lists the items in the queue for the given devEUI.
    rpc List(ListDownlinkQueueItemsRequest) returns (ListDownlinkQueueItemsResponse) {
        option(google.api.http) = {
            get: "/api/applications/{applicationName}/nodes/{devEUI}/queue"
        };
    }
}

message EnqueueDownlinkQueueItemRequest {
    // hex encoded DevEUI
    string devEUI = 1;
	// random reference (used on ack notification)
	string reference = 2;
    // requires an ack from the node
    bool confirmed = 3;
    // FPort to be used
    uint32 fPort = 4;
    // base64 encoded data
    bytes data = 5;
	// name of the application to which the node is linked
	string applicationName = 6;
}

message EnqueueDownlinkQueueItemResponse {}

message DeleteDownlinkQeueueItemRequest {
    // ID of the queue item
    int64 id = 1;
    // hex encoded DevEUI
    string devEUI = 2;
	// name of the application to which the node is linked
	string applicationName = 3;
}

message DeleteDownlinkQueueItemResponse {}

message DownlinkQueueItem {
    // id of the queue item
    int64 id = 1;
    // hex encoded DevEUI
    string devEUI = 2;
	// random reference (used on ack notification)
	string reference = 3;
    // requires an ack from the node
    bool confirmed = 4;
    // the transmission is pending (waiting for an ack)
    bool pending = 5;
    // FPort to be used
    uint32 fPort = 6;
    // base64 encoded data
    bytes data = 7;   
}

message ListDownlinkQueueItemsRequest {
    // hex encoded DevEUI
    string devEUI = 1;
	// name of the application to which the node is linked
	string applicationName = 2;
}

message ListDownlinkQueueItemsResponse {
    repeated DownlinkQueueItem items = 1;
}
