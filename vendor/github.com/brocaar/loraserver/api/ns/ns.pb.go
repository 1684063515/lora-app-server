// Code generated by protoc-gen-go.
// source: ns.proto
// DO NOT EDIT!

/*
Package ns is a generated protocol buffer package.

It is generated from these files:
	ns.proto

It has these top-level messages:
	CreateNodeSessionRequest
	CreateNodeSessionResponse
	GetNodeSessionRequest
	GetNodeSessionResponse
	UpdateNodeSessionRequest
	UpdateNodeSessionResponse
	DeleteNodeSessionRequest
	DeleteNodeSessionResponse
	GetRandomDevAddrRequest
	GetRandomDevAddrResponse
	EnqueueDataDownMACCommandRequest
	EnqueueDataDownMACCommandResponse
*/
package ns

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RXWindow int32

const (
	RXWindow_RX1 RXWindow = 0
	RXWindow_RX2 RXWindow = 1
)

var RXWindow_name = map[int32]string{
	0: "RX1",
	1: "RX2",
}
var RXWindow_value = map[string]int32{
	"RX1": 0,
	"RX2": 1,
}

func (x RXWindow) String() string {
	return proto.EnumName(RXWindow_name, int32(x))
}
func (RXWindow) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateNodeSessionRequest struct {
	DevAddr     []byte   `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	AppEUI      []byte   `protobuf:"bytes,2,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	DevEUI      []byte   `protobuf:"bytes,3,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	NwkSKey     []byte   `protobuf:"bytes,4,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	FCntUp      uint32   `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	FCntDown    uint32   `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
	RxDelay     uint32   `protobuf:"varint,7,opt,name=rxDelay" json:"rxDelay,omitempty"`
	Rx1DROffset uint32   `protobuf:"varint,8,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	CFList      []uint32 `protobuf:"varint,9,rep,packed,name=cFList" json:"cFList,omitempty"`
	RxWindow    RXWindow `protobuf:"varint,10,opt,name=rxWindow,enum=ns.RXWindow" json:"rxWindow,omitempty"`
	Rx2DR       uint32   `protobuf:"varint,11,opt,name=rx2DR" json:"rx2DR,omitempty"`
}

func (m *CreateNodeSessionRequest) Reset()                    { *m = CreateNodeSessionRequest{} }
func (m *CreateNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeSessionRequest) ProtoMessage()               {}
func (*CreateNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateNodeSessionResponse struct {
}

func (m *CreateNodeSessionResponse) Reset()                    { *m = CreateNodeSessionResponse{} }
func (m *CreateNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeSessionResponse) ProtoMessage()               {}
func (*CreateNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetNodeSessionRequest struct {
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *GetNodeSessionRequest) Reset()                    { *m = GetNodeSessionRequest{} }
func (m *GetNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeSessionRequest) ProtoMessage()               {}
func (*GetNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetNodeSessionResponse struct {
	DevAddr     []byte   `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	AppEUI      []byte   `protobuf:"bytes,2,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	DevEUI      []byte   `protobuf:"bytes,3,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	NwkSKey     []byte   `protobuf:"bytes,4,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	FCntUp      uint32   `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	FCntDown    uint32   `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
	RxDelay     uint32   `protobuf:"varint,7,opt,name=rxDelay" json:"rxDelay,omitempty"`
	Rx1DROffset uint32   `protobuf:"varint,8,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	CFList      []uint32 `protobuf:"varint,9,rep,packed,name=cFList" json:"cFList,omitempty"`
	RxWindow    RXWindow `protobuf:"varint,10,opt,name=rxWindow,enum=ns.RXWindow" json:"rxWindow,omitempty"`
	Rx2DR       uint32   `protobuf:"varint,11,opt,name=rx2DR" json:"rx2DR,omitempty"`
}

func (m *GetNodeSessionResponse) Reset()                    { *m = GetNodeSessionResponse{} }
func (m *GetNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeSessionResponse) ProtoMessage()               {}
func (*GetNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UpdateNodeSessionRequest struct {
	DevAddr     []byte   `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	AppEUI      []byte   `protobuf:"bytes,2,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	DevEUI      []byte   `protobuf:"bytes,3,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	NwkSKey     []byte   `protobuf:"bytes,4,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	FCntUp      uint32   `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	FCntDown    uint32   `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
	RxDelay     uint32   `protobuf:"varint,7,opt,name=rxDelay" json:"rxDelay,omitempty"`
	Rx1DROffset uint32   `protobuf:"varint,8,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	CFList      []uint32 `protobuf:"varint,9,rep,packed,name=cFList" json:"cFList,omitempty"`
	RxWindow    RXWindow `protobuf:"varint,10,opt,name=rxWindow,enum=ns.RXWindow" json:"rxWindow,omitempty"`
	Rx2DR       uint32   `protobuf:"varint,11,opt,name=rx2DR" json:"rx2DR,omitempty"`
}

func (m *UpdateNodeSessionRequest) Reset()                    { *m = UpdateNodeSessionRequest{} }
func (m *UpdateNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeSessionRequest) ProtoMessage()               {}
func (*UpdateNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UpdateNodeSessionResponse struct {
}

func (m *UpdateNodeSessionResponse) Reset()                    { *m = UpdateNodeSessionResponse{} }
func (m *UpdateNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeSessionResponse) ProtoMessage()               {}
func (*UpdateNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeleteNodeSessionRequest struct {
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *DeleteNodeSessionRequest) Reset()                    { *m = DeleteNodeSessionRequest{} }
func (m *DeleteNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeSessionRequest) ProtoMessage()               {}
func (*DeleteNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeleteNodeSessionResponse struct {
}

func (m *DeleteNodeSessionResponse) Reset()                    { *m = DeleteNodeSessionResponse{} }
func (m *DeleteNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeSessionResponse) ProtoMessage()               {}
func (*DeleteNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetRandomDevAddrRequest struct {
}

func (m *GetRandomDevAddrRequest) Reset()                    { *m = GetRandomDevAddrRequest{} }
func (m *GetRandomDevAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrRequest) ProtoMessage()               {}
func (*GetRandomDevAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetRandomDevAddrResponse struct {
	DevAddr []byte `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
}

func (m *GetRandomDevAddrResponse) Reset()                    { *m = GetRandomDevAddrResponse{} }
func (m *GetRandomDevAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrResponse) ProtoMessage()               {}
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type EnqueueDataDownMACCommandRequest struct {
	DevEUI     []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	FrmPayload bool   `protobuf:"varint,2,opt,name=frmPayload" json:"frmPayload,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EnqueueDataDownMACCommandRequest) Reset()         { *m = EnqueueDataDownMACCommandRequest{} }
func (m *EnqueueDataDownMACCommandRequest) String() string { return proto.CompactTextString(m) }
func (*EnqueueDataDownMACCommandRequest) ProtoMessage()    {}
func (*EnqueueDataDownMACCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

type EnqueueDataDownMACCommandResponse struct {
}

func (m *EnqueueDataDownMACCommandResponse) Reset()         { *m = EnqueueDataDownMACCommandResponse{} }
func (m *EnqueueDataDownMACCommandResponse) String() string { return proto.CompactTextString(m) }
func (*EnqueueDataDownMACCommandResponse) ProtoMessage()    {}
func (*EnqueueDataDownMACCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

func init() {
	proto.RegisterType((*CreateNodeSessionRequest)(nil), "ns.CreateNodeSessionRequest")
	proto.RegisterType((*CreateNodeSessionResponse)(nil), "ns.CreateNodeSessionResponse")
	proto.RegisterType((*GetNodeSessionRequest)(nil), "ns.GetNodeSessionRequest")
	proto.RegisterType((*GetNodeSessionResponse)(nil), "ns.GetNodeSessionResponse")
	proto.RegisterType((*UpdateNodeSessionRequest)(nil), "ns.UpdateNodeSessionRequest")
	proto.RegisterType((*UpdateNodeSessionResponse)(nil), "ns.UpdateNodeSessionResponse")
	proto.RegisterType((*DeleteNodeSessionRequest)(nil), "ns.DeleteNodeSessionRequest")
	proto.RegisterType((*DeleteNodeSessionResponse)(nil), "ns.DeleteNodeSessionResponse")
	proto.RegisterType((*GetRandomDevAddrRequest)(nil), "ns.GetRandomDevAddrRequest")
	proto.RegisterType((*GetRandomDevAddrResponse)(nil), "ns.GetRandomDevAddrResponse")
	proto.RegisterType((*EnqueueDataDownMACCommandRequest)(nil), "ns.EnqueueDataDownMACCommandRequest")
	proto.RegisterType((*EnqueueDataDownMACCommandResponse)(nil), "ns.EnqueueDataDownMACCommandResponse")
	proto.RegisterEnum("ns.RXWindow", RXWindow_name, RXWindow_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NetworkServer service

type NetworkServerClient interface {
	// CreateNodeSession creates the given node-session. The DevAddr must contain the same NwkID as the configured NetID. Node-sessions will expire automatically after the configured TTL.
	CreateNodeSession(ctx context.Context, in *CreateNodeSessionRequest, opts ...grpc.CallOption) (*CreateNodeSessionResponse, error)
	// GetNodeSession returns the node-session matching the given DevEUI.
	GetNodeSession(ctx context.Context, in *GetNodeSessionRequest, opts ...grpc.CallOption) (*GetNodeSessionResponse, error)
	// UpdateNodeSession updates the given node-session.
	UpdateNodeSession(ctx context.Context, in *UpdateNodeSessionRequest, opts ...grpc.CallOption) (*UpdateNodeSessionResponse, error)
	// DeleteNodeSession deletes the node-session matching the given DevAddr.
	DeleteNodeSession(ctx context.Context, in *DeleteNodeSessionRequest, opts ...grpc.CallOption) (*DeleteNodeSessionResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
	// EnqueueDataDownMACCommand adds the downlink mac-command to the queue.
	EnqueueDataDownMACCommand(ctx context.Context, in *EnqueueDataDownMACCommandRequest, opts ...grpc.CallOption) (*EnqueueDataDownMACCommandResponse, error)
}

type networkServerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerClient(cc *grpc.ClientConn) NetworkServerClient {
	return &networkServerClient{cc}
}

func (c *networkServerClient) CreateNodeSession(ctx context.Context, in *CreateNodeSessionRequest, opts ...grpc.CallOption) (*CreateNodeSessionResponse, error) {
	out := new(CreateNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetNodeSession(ctx context.Context, in *GetNodeSessionRequest, opts ...grpc.CallOption) (*GetNodeSessionResponse, error) {
	out := new(GetNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateNodeSession(ctx context.Context, in *UpdateNodeSessionRequest, opts ...grpc.CallOption) (*UpdateNodeSessionResponse, error) {
	out := new(UpdateNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteNodeSession(ctx context.Context, in *DeleteNodeSessionRequest, opts ...grpc.CallOption) (*DeleteNodeSessionResponse, error) {
	out := new(DeleteNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetRandomDevAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) EnqueueDataDownMACCommand(ctx context.Context, in *EnqueueDataDownMACCommandRequest, opts ...grpc.CallOption) (*EnqueueDataDownMACCommandResponse, error) {
	out := new(EnqueueDataDownMACCommandResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/EnqueueDataDownMACCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServer service

type NetworkServerServer interface {
	// CreateNodeSession creates the given node-session. The DevAddr must contain the same NwkID as the configured NetID. Node-sessions will expire automatically after the configured TTL.
	CreateNodeSession(context.Context, *CreateNodeSessionRequest) (*CreateNodeSessionResponse, error)
	// GetNodeSession returns the node-session matching the given DevEUI.
	GetNodeSession(context.Context, *GetNodeSessionRequest) (*GetNodeSessionResponse, error)
	// UpdateNodeSession updates the given node-session.
	UpdateNodeSession(context.Context, *UpdateNodeSessionRequest) (*UpdateNodeSessionResponse, error)
	// DeleteNodeSession deletes the node-session matching the given DevAddr.
	DeleteNodeSession(context.Context, *DeleteNodeSessionRequest) (*DeleteNodeSessionResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *GetRandomDevAddrRequest) (*GetRandomDevAddrResponse, error)
	// EnqueueDataDownMACCommand adds the downlink mac-command to the queue.
	EnqueueDataDownMACCommand(context.Context, *EnqueueDataDownMACCommandRequest) (*EnqueueDataDownMACCommandResponse, error)
}

func RegisterNetworkServerServer(s *grpc.Server, srv NetworkServerServer) {
	s.RegisterService(&_NetworkServer_serviceDesc, srv)
}

func _NetworkServer_CreateNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateNodeSession(ctx, req.(*CreateNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetNodeSession(ctx, req.(*GetNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateNodeSession(ctx, req.(*UpdateNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteNodeSession(ctx, req.(*DeleteNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetRandomDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetRandomDevAddr(ctx, req.(*GetRandomDevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_EnqueueDataDownMACCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueDataDownMACCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).EnqueueDataDownMACCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/EnqueueDataDownMACCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).EnqueueDataDownMACCommand(ctx, req.(*EnqueueDataDownMACCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ns.NetworkServer",
	HandlerType: (*NetworkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNodeSession",
			Handler:    _NetworkServer_CreateNodeSession_Handler,
		},
		{
			MethodName: "GetNodeSession",
			Handler:    _NetworkServer_GetNodeSession_Handler,
		},
		{
			MethodName: "UpdateNodeSession",
			Handler:    _NetworkServer_UpdateNodeSession_Handler,
		},
		{
			MethodName: "DeleteNodeSession",
			Handler:    _NetworkServer_DeleteNodeSession_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _NetworkServer_GetRandomDevAddr_Handler,
		},
		{
			MethodName: "EnqueueDataDownMACCommand",
			Handler:    _NetworkServer_EnqueueDataDownMACCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("ns.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x18, 0x5d, 0xda, 0xae, 0x0d, 0xdf, 0x7e, 0xd4, 0x59, 0x30, 0xdc, 0xb4, 0xa0, 0x10, 0x40, 0xaa,
	0xb8, 0x28, 0x5a, 0xe0, 0x05, 0xa6, 0x66, 0x4c, 0x13, 0xb0, 0x21, 0x57, 0x15, 0xbb, 0x35, 0xd8,
	0x95, 0xca, 0x5a, 0x3b, 0x73, 0xdc, 0xbf, 0xe7, 0xe0, 0x95, 0x10, 0xcf, 0x85, 0x1c, 0xa7, 0xa5,
	0xac, 0x09, 0x15, 0x12, 0x97, 0xbb, 0xf3, 0xf9, 0x4e, 0xbf, 0x63, 0xf7, 0x7c, 0xc7, 0x0e, 0xb8,
	0x22, 0xe9, 0xc4, 0x4a, 0x6a, 0x89, 0x4a, 0x22, 0x09, 0x7e, 0x96, 0x00, 0x77, 0x15, 0xa7, 0x9a,
	0x5f, 0x4a, 0xc6, 0x7b, 0x3c, 0x49, 0x86, 0x52, 0x10, 0x7e, 0x3b, 0xe1, 0x89, 0x46, 0x18, 0x6a,
	0x8c, 0x4f, 0x4f, 0x19, 0x53, 0xd8, 0xf1, 0x9d, 0xf6, 0x3e, 0x59, 0x42, 0x74, 0x0c, 0x55, 0x1a,
	0xc7, 0x67, 0xfd, 0x0b, 0x5c, 0x4a, 0x89, 0x0c, 0x99, 0x3a, 0xe3, 0x53, 0x53, 0x2f, 0xdb, 0xba,
	0x45, 0x46, 0x49, 0xcc, 0x6e, 0x7a, 0xef, 0xf9, 0x02, 0x57, 0xac, 0x52, 0x06, 0x4d, 0xc7, 0xa0,
	0x2b, 0x74, 0x3f, 0xc6, 0xbb, 0xbe, 0xd3, 0x3e, 0x20, 0x19, 0x42, 0x1e, 0xb8, 0x66, 0x15, 0xc9,
	0x99, 0xc0, 0xd5, 0x94, 0x59, 0x61, 0xa3, 0xa6, 0xe6, 0x11, 0x1f, 0xd1, 0x05, 0xae, 0xa5, 0xd4,
	0x12, 0x22, 0x1f, 0xf6, 0xd4, 0xfc, 0x24, 0x22, 0x57, 0x83, 0x41, 0xc2, 0x35, 0x76, 0x53, 0x76,
	0xbd, 0x64, 0xf6, 0xfb, 0xfa, 0xee, 0xc3, 0x30, 0xd1, 0xf8, 0x81, 0x5f, 0x36, 0xfb, 0x59, 0x84,
	0xda, 0xe0, 0xaa, 0xf9, 0xe7, 0xa1, 0x60, 0x72, 0x86, 0xc1, 0x77, 0xda, 0x87, 0xe1, 0x7e, 0x47,
	0x24, 0x1d, 0x72, 0x6d, 0x6b, 0x64, 0xc5, 0xa2, 0x87, 0xb0, 0xab, 0xe6, 0x61, 0x44, 0xf0, 0x5e,
	0xaa, 0x6e, 0x41, 0xd0, 0x84, 0x46, 0x8e, 0x8f, 0x49, 0x2c, 0x45, 0xc2, 0x83, 0xd7, 0xf0, 0xe8,
	0x9c, 0xeb, 0x1c, 0x87, 0x7f, 0xfb, 0xe5, 0xac, 0xfb, 0x15, 0xfc, 0x28, 0xc1, 0xf1, 0xdd, 0x0e,
	0xab, 0x75, 0x3f, 0x94, 0x7f, 0x18, 0x8a, 0x49, 0x77, 0x3f, 0x66, 0xf7, 0xe9, 0xfe, 0x0f, 0xe9,
	0xce, 0xf1, 0x31, 0x4b, 0x77, 0x08, 0x38, 0xe2, 0x23, 0x9e, 0x6b, 0x72, 0x51, 0xc0, 0x9b, 0xd0,
	0xc8, 0xe9, 0xc9, 0x04, 0x1b, 0xf0, 0xf8, 0x9c, 0x6b, 0x42, 0x05, 0x93, 0xe3, 0xc8, 0xce, 0x24,
	0xd3, 0x0b, 0xde, 0x02, 0xde, 0xa4, 0xb6, 0xdd, 0x8c, 0x40, 0x80, 0x7f, 0x26, 0x6e, 0x27, 0x7c,
	0xc2, 0x23, 0xaa, 0xa9, 0x71, 0xf9, 0xe3, 0x69, 0xb7, 0x2b, 0xc7, 0x63, 0x2a, 0xd8, 0x96, 0x93,
	0xa2, 0xa7, 0x00, 0x03, 0x35, 0xfe, 0x44, 0x17, 0x23, 0x49, 0x59, 0x1a, 0x08, 0x97, 0xac, 0x55,
	0x10, 0x82, 0x0a, 0xa3, 0x9a, 0x66, 0x91, 0x48, 0xd7, 0xc1, 0x73, 0x78, 0xf6, 0x97, 0xfd, 0xec,
	0x71, 0x5f, 0xb5, 0xc0, 0x5d, 0xfa, 0x8f, 0x6a, 0x50, 0x26, 0xd7, 0x27, 0xf5, 0x1d, 0xbb, 0x08,
	0xeb, 0x4e, 0xf8, 0xbd, 0x02, 0x07, 0x97, 0x5c, 0xcf, 0xa4, 0xba, 0xe9, 0x71, 0x35, 0xe5, 0x0a,
	0x11, 0x38, 0xda, 0x78, 0x61, 0x50, 0xcb, 0x8c, 0xb1, 0xe8, 0x01, 0xf7, 0x9e, 0x14, 0xb0, 0x99,
	0xcf, 0x3b, 0xe8, 0x02, 0x0e, 0xff, 0x7c, 0x66, 0x50, 0xc3, 0xb4, 0xe4, 0x3e, 0x56, 0x9e, 0x97,
	0x47, 0xad, 0xa4, 0x08, 0x1c, 0x6d, 0x44, 0xc4, 0x1e, 0xaf, 0xe8, 0x06, 0xda, 0xe3, 0x15, 0xe7,
	0x2a, 0xd5, 0xdc, 0x48, 0x89, 0xd5, 0x2c, 0x0a, 0x9c, 0xd5, 0x2c, 0x8e, 0xd6, 0x0e, 0xba, 0x82,
	0xfa, 0xdd, 0x04, 0xa1, 0x66, 0xf6, 0xcf, 0xf2, 0x22, 0xe7, 0xb5, 0xf2, 0xc9, 0x95, 0xe0, 0x37,
	0x68, 0x14, 0x0e, 0x1b, 0xbd, 0x30, 0xcd, 0xdb, 0xb2, 0xe7, 0xbd, 0xdc, 0xf2, 0xab, 0xe5, 0x5e,
	0x5f, 0xaa, 0xe9, 0x97, 0xfb, 0xcd, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x09, 0x96, 0xc9,
	0xc5, 0x07, 0x00, 0x00,
}
