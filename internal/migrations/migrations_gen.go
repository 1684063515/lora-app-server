// Code generated by go-bindata.
// sources:
// ../../migrations/0001_initial.sql
// ../../migrations/0002_join_accept_params.sql
// ../../migrations/0003_rx_window_and_rx2_dr.sql
// ../../migrations/0004_remove_application_table.sql
// ../../migrations/0005_add_queue.sql
// ../../migrations/0006_add_node_apps_nwks_key_name_devaddr.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xc1\x4e\xc3\x30\x0c\x86\xcf\xcb\x53\xf8\xb8\x09\x26\x8d\x73\xaf\xbc\x02\xe7\xca\x4b\x7e\x46\xb4\xd4\x8e\xdc\xb4\x90\xb7\x47\x2d\x05\x1a\x09\x6e\x91\xed\x7c\xff\x67\x9f\xcf\xf4\x30\xc4\x9b\x71\x01\xbd\x64\xe7\x0d\xcb\xab\xf0\x35\x81\x38\xe7\x14\x3d\x97\xa8\x42\x47\x77\xe0\x9c\x7b\x4c\x91\xae\xb5\x80\x29\x5b\x1c\xd8\x2a\xdd\x51\x1f\xdd\x41\x78\x00\xf9\x37\x36\xf6\x05\x46\x33\x5b\x8d\x72\xa3\xe3\xd3\xe5\x72\x22\xd1\x42\x32\xa5\xe4\x4e\x9d\x6b\x13\x44\x03\x16\x74\xc0\xfc\x2f\xba\x8d\x35\xbc\xc2\x20\x1e\x63\xa3\xa7\x42\x01\x09\x05\xe4\x79\xf4\x1c\xf0\x13\xba\x11\xee\xa8\x1b\x61\xd7\x98\x46\x84\x7e\xc9\x16\x5d\x89\xeb\xc0\xde\x32\x4a\xc0\xc7\x6a\xd9\x7f\x6b\xa8\x6c\xd6\x5b\x61\x99\xde\x1f\xf1\x59\xdf\xc5\x05\xd3\xfc\xc7\xe7\xce\x7d\x75\x7e\x97\x6f\x2b\xbb\x8d\x3a\xf7\x19\x00\x00\xff\xff\x82\x1d\xc3\x75\x9a\x01\x00\x00")

func _0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialSql,
		"0001_initial.sql",
	)
}

func _0001_initialSql() (*asset, error) {
	bytes, err := _0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.sql", size: 410, mode: os.FileMode(420), modTime: time.Unix(1472984060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_join_accept_paramsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x6e\xb3\x30\x10\x5d\xe3\x53\xcc\x32\xe8\x23\x12\xf9\xba\xe8\x82\x26\xab\x5e\xa1\x6b\x34\xb1\x07\x62\xc5\x8c\x93\xc1\xb4\xe5\xf6\x15\x8e\x20\x84\x22\xb5\xea\xce\x9a\x79\x6f\xde\x8f\xbc\xdd\xc2\xbf\xc6\xd6\x82\x81\xe0\xed\xa2\xb4\xd0\xf0\x0a\x78\x74\x04\xfa\x84\xcc\xe4\x4a\x67\xdb\x00\x1b\x95\x58\x03\x47\x5b\xb7\x24\x16\x1d\x5c\xc4\x36\x28\x3d\x9c\xa9\xcf\x54\xc2\xd8\x44\xbc\xa0\x0e\x24\xf0\x8e\xd2\x5b\xae\x61\xb3\xcb\xf3\x14\xd8\x07\xe0\xce\x39\x95\x16\x6a\x55\xe1\x87\xe3\x73\x1f\xe5\x0d\x67\x39\x80\x50\x45\x42\xac\xa9\x7d\x74\xea\x19\x0c\x39\x0a\x04\x1a\x5b\x8d\x86\x26\x03\xf7\x5b\x60\x39\x50\x4d\x32\x5f\x55\x42\xd7\x8e\x58\xf7\x6b\x4b\x7d\x22\x7d\x86\xcd\x48\x3f\xec\xe1\x09\x90\xcd\x94\xe0\x65\x0f\xcf\x71\x70\xbf\x72\x80\x3c\xcd\x54\xd2\xb1\xbd\x76\x34\x51\xc7\x14\xd9\x48\x4d\x63\x2d\xe8\x86\xde\x6e\xad\xb0\x37\xa4\x12\x34\x06\xb4\x77\x5d\xc3\x20\x9f\xa5\x21\x87\xd1\xd8\xff\xc9\x15\x18\xaa\xb0\x73\x01\xf2\x6c\x81\xde\x95\x46\x4a\x5f\x55\x2d\x85\xdf\x51\xfe\xdc\xf0\xa0\x30\x1c\x5e\x4f\x10\x27\xcb\x0c\x46\xfc\x65\xf4\x91\x7d\x03\xcd\xad\xcf\x91\x85\x52\xf3\xaf\xfa\xea\x3f\x78\x45\x31\x32\x16\x82\xd9\x72\x3c\x93\x58\xec\x16\x35\x14\x4a\xc5\xed\xc3\x5f\x5d\x1d\x46\x46\xa1\xbe\x02\x00\x00\xff\xff\x38\x36\x6f\x1a\x4d\x03\x00\x00")

func _0002_join_accept_paramsSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_join_accept_paramsSql,
		"0002_join_accept_params.sql",
	)
}

func _0002_join_accept_paramsSql() (*asset, error) {
	bytes, err := _0002_join_accept_paramsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_join_accept_params.sql", size: 845, mode: os.FileMode(420), modTime: time.Unix(1472974457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0003_rx_window_and_rx2_drSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcd\xb1\x0a\xc2\x40\x0c\x87\xf1\xd9\x7b\x8a\xff\x6e\x0b\xd2\xb5\xab\xaf\xe0\x5c\xa2\x89\x72\x90\x26\x25\xe4\x38\x1f\x5f\xdc\xa4\xea\xfa\xf1\xc1\x6f\x1c\x71\x5c\xeb\x23\x28\x05\x97\xad\x90\xa6\x04\x92\xae\x2a\x30\x67\x29\x07\x62\xc6\xcd\xb5\xad\x86\x78\x2e\xbd\x1a\x7b\x47\xb5\x9c\x60\x9e\xb0\xa6\x0a\x96\x3b\x35\x4d\x9c\x86\xdd\x3e\x2d\x1c\xff\xde\xb9\x94\x4f\xfb\xec\xdd\x7e\xe8\x1c\xbe\x7d\xf1\xc3\xbe\xbf\x9d\xb9\xbc\x02\x00\x00\xff\xff\xd0\x11\x0c\xf5\xcb\x00\x00\x00")

func _0003_rx_window_and_rx2_drSqlBytes() ([]byte, error) {
	return bindataRead(
		__0003_rx_window_and_rx2_drSql,
		"0003_rx_window_and_rx2_dr.sql",
	)
}

func _0003_rx_window_and_rx2_drSql() (*asset, error) {
	bytes, err := _0003_rx_window_and_rx2_drSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0003_rx_window_and_rx2_dr.sql", size: 203, mode: os.FileMode(420), modTime: time.Unix(1472974457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0004_remove_application_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\xb9\x25\xe1\x4f\x20\xff\xd9\xd7\xbe\x42\xcf\x66\x23\xad\xdd\x25\xf2\x4a\xac\x36\x2d\x7e\xfb\x62\x25\x94\x94\x96\xde\x04\x33\x9a\x6f\x67\x4e\x27\xfc\x5b\x64\x36\x72\xc6\x6b\x0d\x94\x9d\x0d\x4e\x97\xcc\xd0\x92\x38\x00\x40\xb2\x52\x11\x8b\x36\x37\x12\xf5\x2e\x8c\x54\xeb\xc8\x37\x19\xa7\x2b\xaf\x43\x08\xdd\x73\xff\x47\xb5\x66\x89\xe4\x52\x74\x08\xe1\x19\xf0\x52\x3e\x34\x44\xe3\xed\xfd\xc3\x8b\x7d\x87\x3d\x72\x71\x59\x9d\x09\xd5\x64\x21\x5b\x71\xe5\xf5\xd8\x65\xa5\x85\x11\xdf\xc8\x28\x6e\x97\xbe\x93\xad\xa2\x33\xf6\xff\xcf\xe7\x03\xb4\x38\xf4\x96\x73\x38\x0c\x21\x88\x36\x36\x87\xa8\x97\x67\x4c\x4f\x69\x9c\x39\x3a\x92\x34\x17\x8d\xbe\x7f\x40\x0f\x47\xec\xb4\x74\xc6\x0e\xd4\xee\xb0\xc9\xca\xd2\x2b\x0f\xe1\xf7\x79\x28\xa5\x3f\xd7\xc1\x54\x8c\x65\xd6\xad\xc4\x17\x09\xc6\x13\x1b\x6b\xe4\xf6\x6d\x84\xa2\x48\x9c\xd9\x19\x91\x5a\xa4\xc4\xc3\x67\x00\x00\x00\xff\xff\xb4\xbf\x2b\xef\xa2\x01\x00\x00")

func _0004_remove_application_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		__0004_remove_application_tableSql,
		"0004_remove_application_table.sql",
	)
}

func _0004_remove_application_tableSql() (*asset, error) {
	bytes, err := _0004_remove_application_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0004_remove_application_table.sql", size: 418, mode: os.FileMode(420), modTime: time.Unix(1474703337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0005_add_queueSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x4e\xc3\x30\x10\x44\xcf\xf8\x2b\xe6\x98\x8a\x56\x2a\xe7\x5c\xf9\x05\xce\xd1\xc6\x9e\x04\x8b\xcd\x3a\x38\x4e\x0b\x7f\x8f\x42\x9b\x0a\x22\x84\x7a\xb3\xf4\x66\x56\x33\xe3\xc3\x01\x8f\x43\xec\xb3\x14\xe2\x65\x74\x3e\x73\x79\x15\x69\x95\x08\xe9\x6c\x1a\xed\xad\x79\x9f\x39\x13\x95\x03\x80\x18\xd0\xc6\x7e\x62\x8e\xa2\x7b\xf7\x90\xd9\x31\xd3\x3c\x71\x92\xec\x5f\x25\x57\x4f\xc7\xe3\x0e\x96\x0a\x6c\x56\xdd\x7f\x7b\x02\x4f\x0d\xe7\x88\xf6\xb3\x50\x70\xb3\x4c\xb0\x14\x88\x64\x08\x54\x16\xc2\xcb\xe4\x25\x70\xe3\xf6\xc9\xba\x98\x07\x06\xb4\x29\x29\xc5\x6e\x1c\x81\x9d\xcc\x5a\xd0\x89\x4e\xbc\xa8\x47\x5a\x88\xd6\xdf\xa5\xed\xc6\x94\x0b\xa6\x41\x54\xa3\x95\x6d\x68\x29\x72\x4d\xbc\x02\xb7\xab\xdd\x3a\x51\xb4\xc0\x8f\xcd\x44\xcd\x5a\x74\xa9\xf4\x8b\x54\x57\xb2\x1c\xf8\x39\xf9\x73\x3a\x9b\x0b\x39\x8d\xff\xde\xab\xdd\x45\xf3\xd7\xb7\xd4\xee\x2b\x00\x00\xff\xff\xb7\xd4\x53\x7f\xc3\x01\x00\x00")

func _0005_add_queueSqlBytes() ([]byte, error) {
	return bindataRead(
		__0005_add_queueSql,
		"0005_add_queue.sql",
	)
}

func _0005_add_queueSql() (*asset, error) {
	bytes, err := _0005_add_queueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0005_add_queue.sql", size: 451, mode: os.FileMode(420), modTime: time.Unix(1474128106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0006_add_node_apps_nwks_key_name_devaddrSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xbd\xce\x82\x40\x10\x45\xeb\x6f\x9f\x62\x3a\x3e\x23\x24\x58\xd3\xfa\x0a\xd6\xe4\xc2\x8c\x3f\x61\xff\xb2\xce\x42\x78\x7b\x2b\x89\xa0\x31\xb6\x37\x27\x37\xe7\x54\x15\xed\xdd\xed\x92\xa0\x42\xa7\x68\x60\x55\x12\x29\x3a\x2b\xe4\x03\x8b\xf9\x03\x33\xf5\xc1\x66\xe7\x09\x31\xb6\xf7\x76\x90\x99\xba\x59\x05\xe4\x83\x92\xcf\xd6\x96\x2b\xca\x4f\xc3\x0f\x14\xcb\xd8\x82\x39\x7d\xbf\x82\x13\x1a\x91\xfa\x2b\xd2\xff\xa1\xae\x77\x0b\x47\x2c\x67\x64\xab\x54\x14\x8d\x31\xaf\x11\xc7\x30\xf9\x0f\x19\x9c\x42\x7c\xeb\x28\xd7\xfb\x62\xbe\xd9\x9f\xae\x5b\x1c\x4e\x1a\xf3\x08\x00\x00\xff\xff\xa5\x00\xea\x2c\x41\x01\x00\x00")

func _0006_add_node_apps_nwks_key_name_devaddrSqlBytes() ([]byte, error) {
	return bindataRead(
		__0006_add_node_apps_nwks_key_name_devaddrSql,
		"0006_add_node_apps_nwks_key_name_devaddr.sql",
	)
}

func _0006_add_node_apps_nwks_key_name_devaddrSql() (*asset, error) {
	bytes, err := _0006_add_node_apps_nwks_key_name_devaddrSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0006_add_node_apps_nwks_key_name_devaddr.sql", size: 321, mode: os.FileMode(420), modTime: time.Unix(1474703350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial.sql": _0001_initialSql,
	"0002_join_accept_params.sql": _0002_join_accept_paramsSql,
	"0003_rx_window_and_rx2_dr.sql": _0003_rx_window_and_rx2_drSql,
	"0004_remove_application_table.sql": _0004_remove_application_tableSql,
	"0005_add_queue.sql": _0005_add_queueSql,
	"0006_add_node_apps_nwks_key_name_devaddr.sql": _0006_add_node_apps_nwks_key_name_devaddrSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial.sql": &bintree{_0001_initialSql, map[string]*bintree{}},
	"0002_join_accept_params.sql": &bintree{_0002_join_accept_paramsSql, map[string]*bintree{}},
	"0003_rx_window_and_rx2_dr.sql": &bintree{_0003_rx_window_and_rx2_drSql, map[string]*bintree{}},
	"0004_remove_application_table.sql": &bintree{_0004_remove_application_tableSql, map[string]*bintree{}},
	"0005_add_queue.sql": &bintree{_0005_add_queueSql, map[string]*bintree{}},
	"0006_add_node_apps_nwks_key_name_devaddr.sql": &bintree{_0006_add_node_apps_nwks_key_name_devaddrSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

