// Code generated by go-bindata.
// sources:
// ../../migrations/0001_initial.sql
// ../../migrations/0002_join_accept_params.sql
// ../../migrations/0003_rx_window_and_rx2_dr.sql
// ../../migrations/0004_remove_application_table.sql
// ../../migrations/0005_add_queue.sql
// ../../migrations/0006_add_app_s_and_nwk_s_keys.sql
// ../../migrations/0007_add_devaddr.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xc1\x4e\xc3\x30\x0c\x86\xcf\xcb\x53\xf8\xb8\x09\x26\x8d\x73\xaf\xbc\x02\xe7\xca\x4b\x7e\x46\xb4\xd4\x8e\xdc\xb4\x90\xb7\x47\x2d\x05\x1a\x09\x6e\x91\xed\x7c\xff\x67\x9f\xcf\xf4\x30\xc4\x9b\x71\x01\xbd\x64\xe7\x0d\xcb\xab\xf0\x35\x81\x38\xe7\x14\x3d\x97\xa8\x42\x47\x77\xe0\x9c\x7b\x4c\x91\xae\xb5\x80\x29\x5b\x1c\xd8\x2a\xdd\x51\x1f\xdd\x41\x78\x00\xf9\x37\x36\xf6\x05\x46\x33\x5b\x8d\x72\xa3\xe3\xd3\xe5\x72\x22\xd1\x42\x32\xa5\xe4\x4e\x9d\x6b\x13\x44\x03\x16\x74\xc0\xfc\x2f\xba\x8d\x35\xbc\xc2\x20\x1e\x63\xa3\xa7\x42\x01\x09\x05\xe4\x79\xf4\x1c\xf0\x13\xba\x11\xee\xa8\x1b\x61\xd7\x98\x46\x84\x7e\xc9\x16\x5d\x89\xeb\xc0\xde\x32\x4a\xc0\xc7\x6a\xd9\x7f\x6b\xa8\x6c\xd6\x5b\x61\x99\xde\x1f\xf1\x59\xdf\xc5\x05\xd3\xfc\xc7\xe7\xce\x7d\x75\x7e\x97\x6f\x2b\xbb\x8d\x3a\xf7\x19\x00\x00\xff\xff\x82\x1d\xc3\x75\x9a\x01\x00\x00")

func _0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialSql,
		"0001_initial.sql",
	)
}

func _0001_initialSql() (*asset, error) {
	bytes, err := _0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.sql", size: 410, mode: os.FileMode(420), modTime: time.Unix(1472984060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_join_accept_paramsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x6e\xb3\x30\x10\x5d\xe3\x53\xcc\x32\xe8\x23\x12\xf9\xba\xe8\x82\x26\xab\x5e\xa1\x6b\x34\xb1\x07\x62\xc5\x8c\x93\xc1\xb4\xe5\xf6\x15\x8e\x20\x84\x22\xb5\xea\xce\x9a\x79\x6f\xde\x8f\xbc\xdd\xc2\xbf\xc6\xd6\x82\x81\xe0\xed\xa2\xb4\xd0\xf0\x0a\x78\x74\x04\xfa\x84\xcc\xe4\x4a\x67\xdb\x00\x1b\x95\x58\x03\x47\x5b\xb7\x24\x16\x1d\x5c\xc4\x36\x28\x3d\x9c\xa9\xcf\x54\xc2\xd8\x44\xbc\xa0\x0e\x24\xf0\x8e\xd2\x5b\xae\x61\xb3\xcb\xf3\x14\xd8\x07\xe0\xce\x39\x95\x16\x6a\x55\xe1\x87\xe3\x73\x1f\xe5\x0d\x67\x39\x80\x50\x45\x42\xac\xa9\x7d\x74\xea\x19\x0c\x39\x0a\x04\x1a\x5b\x8d\x86\x26\x03\xf7\x5b\x60\x39\x50\x4d\x32\x5f\x55\x42\xd7\x8e\x58\xf7\x6b\x4b\x7d\x22\x7d\x86\xcd\x48\x3f\xec\xe1\x09\x90\xcd\x94\xe0\x65\x0f\xcf\x71\x70\xbf\x72\x80\x3c\xcd\x54\xd2\xb1\xbd\x76\x34\x51\xc7\x14\xd9\x48\x4d\x63\x2d\xe8\x86\xde\x6e\xad\xb0\x37\xa4\x12\x34\x06\xb4\x77\x5d\xc3\x20\x9f\xa5\x21\x87\xd1\xd8\xff\xc9\x15\x18\xaa\xb0\x73\x01\xf2\x6c\x81\xde\x95\x46\x4a\x5f\x55\x2d\x85\xdf\x51\xfe\xdc\xf0\xa0\x30\x1c\x5e\x4f\x10\x27\xcb\x0c\x46\xfc\x65\xf4\x91\x7d\x03\xcd\xad\xcf\x91\x85\x52\xf3\xaf\xfa\xea\x3f\x78\x45\x31\x32\x16\x82\xd9\x72\x3c\x93\x58\xec\x16\x35\x14\x4a\xc5\xed\xc3\x5f\x5d\x1d\x46\x46\xa1\xbe\x02\x00\x00\xff\xff\x38\x36\x6f\x1a\x4d\x03\x00\x00")

func _0002_join_accept_paramsSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_join_accept_paramsSql,
		"0002_join_accept_params.sql",
	)
}

func _0002_join_accept_paramsSql() (*asset, error) {
	bytes, err := _0002_join_accept_paramsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_join_accept_params.sql", size: 845, mode: os.FileMode(420), modTime: time.Unix(1472974457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0003_rx_window_and_rx2_drSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcd\xb1\x0a\xc2\x40\x0c\x87\xf1\xd9\x7b\x8a\xff\x6e\x0b\xd2\xb5\xab\xaf\xe0\x5c\xa2\x89\x72\x90\x26\x25\xe4\x38\x1f\x5f\xdc\xa4\xea\xfa\xf1\xc1\x6f\x1c\x71\x5c\xeb\x23\x28\x05\x97\xad\x90\xa6\x04\x92\xae\x2a\x30\x67\x29\x07\x62\xc6\xcd\xb5\xad\x86\x78\x2e\xbd\x1a\x7b\x47\xb5\x9c\x60\x9e\xb0\xa6\x0a\x96\x3b\x35\x4d\x9c\x86\xdd\x3e\x2d\x1c\xff\xde\xb9\x94\x4f\xfb\xec\xdd\x7e\xe8\x1c\xbe\x7d\xf1\xc3\xbe\xbf\x9d\xb9\xbc\x02\x00\x00\xff\xff\xd0\x11\x0c\xf5\xcb\x00\x00\x00")

func _0003_rx_window_and_rx2_drSqlBytes() ([]byte, error) {
	return bindataRead(
		__0003_rx_window_and_rx2_drSql,
		"0003_rx_window_and_rx2_dr.sql",
	)
}

func _0003_rx_window_and_rx2_drSql() (*asset, error) {
	bytes, err := _0003_rx_window_and_rx2_drSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0003_rx_window_and_rx2_dr.sql", size: 203, mode: os.FileMode(420), modTime: time.Unix(1472974457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0004_remove_application_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x41\x6a\x33\x31\x0c\x46\xf7\x3e\xc5\xb7\x9b\x84\x3f\x81\xfc\xeb\xd9\xf6\x0a\x5d\x07\xc5\xd6\xa4\xa6\x1e\xc9\xc8\x9a\x96\xb9\x7d\x89\xa7\x84\x94\xb6\xd0\x9d\xc1\x42\xef\xe9\x1d\x8f\xf8\x37\xe7\xab\x91\x33\x9e\x6b\xa0\xe2\x6c\x70\xba\x14\x86\x68\xe2\x00\x00\xc9\xb4\x22\xaa\x34\x37\xca\xe2\xfd\xe3\x4c\xb5\x9e\x79\xc9\xe7\xe9\x95\xd7\x43\x1f\xa3\x94\x10\xb5\x2c\xb3\x40\x68\x66\xc4\x17\x32\x8a\xb7\x7d\x6f\x64\x6b\x96\x2b\x76\xff\x4f\xa7\x3d\x44\x1d\xb2\x94\x82\xc4\x13\x2d\xc5\x31\x0c\x63\x08\x1d\xb2\x81\xa9\xd6\x92\x23\x79\x56\x19\x43\x78\x34\x7c\xd2\x77\x09\xd1\xf8\xf6\xfe\x36\x8b\xdd\xa6\xb1\x89\xe1\xb2\x3a\x13\xaa\xe5\x99\x6c\xc5\xdd\xf2\x4f\x6a\x61\x3f\x86\x90\xa5\xb1\x39\xb2\xb8\x3e\x62\xfa\x96\xc6\x85\xa3\x23\xe5\xe6\x59\xa2\xef\x3e\xa1\xfb\x03\x06\xd1\xce\x18\x40\x6d\x83\x4d\xa6\x73\x6f\x36\x86\x9f\xfb\x6e\xe1\x7e\xcf\x8b\x49\x8d\xf3\x55\x6e\x47\xdc\x49\x30\x9e\xd8\x58\x22\xb7\x2f\x11\x54\x90\xb8\xb0\x33\x22\xb5\x48\x89\xc7\x8f\x00\x00\x00\xff\xff\xd8\xee\x66\x47\xe3\x01\x00\x00")

func _0004_remove_application_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		__0004_remove_application_tableSql,
		"0004_remove_application_table.sql",
	)
}

func _0004_remove_application_tableSql() (*asset, error) {
	bytes, err := _0004_remove_application_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0004_remove_application_table.sql", size: 483, mode: os.FileMode(420), modTime: time.Unix(1472984034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0005_add_queueSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\xcd\x4e\xf3\x30\x10\x3c\x7f\x7e\x8a\x39\xb6\xfa\x5a\xa9\x9c\x73\xe5\x15\x38\x47\x1b\x7b\x12\x2c\x9c\xdd\xb0\x71\x5a\x78\x7b\x14\xd2\x22\x8a\x10\x37\x6b\x67\x3c\x7f\xc7\x23\xfe\x8f\x79\x70\xa9\xc4\xd3\x14\xa2\x73\x7d\x55\xe9\x0a\x91\xec\xa2\x25\xeb\x4b\xfb\xba\x70\x21\x76\x01\x00\x72\x42\x97\x87\x99\x9e\xa5\x1c\xc2\x3f\x67\x4f\xa7\x46\xe2\x2c\x1e\x9f\xc5\x77\x0f\xa7\xd3\xfe\xf0\x49\x4d\x3c\xb7\x5c\x32\xba\xf7\x4a\xc1\x17\x73\x86\x5a\x22\x4c\x91\x58\x58\x89\x28\x73\x94\x44\xa8\x55\xe8\x52\xca\xf6\x3b\x9a\xf6\xd9\x47\x26\x74\x66\x85\xa2\xdb\x79\xa2\xa6\xac\xc3\xfd\xb1\x9f\xcc\x2b\xe6\x51\x4a\xc9\x5a\xaf\xee\x52\x65\xb3\x0e\xfb\x26\xdc\x9a\x65\x4d\x7c\xfb\xd1\xac\xbd\x05\x5d\x23\xdd\x21\xbb\x2b\xb2\x0a\x7c\x5f\xea\xd1\x2e\x1a\x92\xdb\xf4\xa7\x5e\x13\x36\xce\x6f\x6b\x36\xe1\x23\x00\x00\xff\xff\xaf\xd6\x11\x52\x7a\x01\x00\x00")

func _0005_add_queueSqlBytes() ([]byte, error) {
	return bindataRead(
		__0005_add_queueSql,
		"0005_add_queue.sql",
	)
}

func _0005_add_queueSql() (*asset, error) {
	bytes, err := _0005_add_queueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0005_add_queue.sql", size: 378, mode: os.FileMode(420), modTime: time.Unix(1474112295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0006_add_app_s_and_nwk_s_keysSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\x31\x0e\x82\x60\x0c\x47\xf1\xd9\x9e\xe2\xbf\x0b\x27\x60\xf5\x0a\xce\xa4\xd8\xc6\x18\x4a\xdb\x7c\x96\x10\x6e\xef\x66\x24\xb2\xbe\xbc\xe4\xd7\xf7\xb8\x2e\xaf\x67\xe3\x52\xdc\x93\xd8\x4a\x1b\x8a\x27\x53\x78\x88\xd2\x85\x45\xf0\x08\x5b\x17\x07\x67\x8e\xef\x71\xd6\x1d\xd3\x5e\xca\xf0\x28\xf8\x6a\xd6\x1d\x2e\xdf\xe6\xd3\x6b\x20\xfa\xc5\x6e\xb1\xf9\x09\x27\x2d\xf2\xcf\xeb\x8e\xfd\x2b\x0c\xf4\x09\x00\x00\xff\xff\x3a\x20\x81\xe7\xbf\x00\x00\x00")

func _0006_add_app_s_and_nwk_s_keysSqlBytes() ([]byte, error) {
	return bindataRead(
		__0006_add_app_s_and_nwk_s_keysSql,
		"0006_add_app_s_and_nwk_s_keys.sql",
	)
}

func _0006_add_app_s_and_nwk_s_keysSql() (*asset, error) {
	bytes, err := _0006_add_app_s_and_nwk_s_keysSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0006_add_app_s_and_nwk_s_keys.sql", size: 191, mode: os.FileMode(420), modTime: time.Unix(1473361125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0007_add_devaddrSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x42\x31\x0c\x06\xe0\xb3\x99\xe2\xbf\x4b\x27\xe8\xd5\x15\x3c\x4b\x6a\x82\x08\x69\x52\x42\xaa\xb8\xbd\x57\x91\xb7\xc0\xd7\x1a\xce\xf3\xf9\x48\x2e\xc5\x75\x11\x5b\x69\xa2\x78\x98\xc2\x43\x94\x4e\x2c\x82\x7b\xd8\x9e\x0e\xd1\xd7\x8d\x45\x12\xe3\x53\xca\xf0\x28\xf8\x36\xeb\x44\xbf\xca\x25\xde\x7e\xe0\x48\xc6\xfa\x87\x3a\x7d\x03\x00\x00\xff\xff\xa2\x39\x1e\xf0\x7f\x00\x00\x00")

func _0007_add_devaddrSqlBytes() ([]byte, error) {
	return bindataRead(
		__0007_add_devaddrSql,
		"0007_add_devaddr.sql",
	)
}

func _0007_add_devaddrSql() (*asset, error) {
	bytes, err := _0007_add_devaddrSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0007_add_devaddr.sql", size: 127, mode: os.FileMode(420), modTime: time.Unix(1473434381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial.sql": _0001_initialSql,
	"0002_join_accept_params.sql": _0002_join_accept_paramsSql,
	"0003_rx_window_and_rx2_dr.sql": _0003_rx_window_and_rx2_drSql,
	"0004_remove_application_table.sql": _0004_remove_application_tableSql,
	"0005_add_queue.sql": _0005_add_queueSql,
	"0006_add_app_s_and_nwk_s_keys.sql": _0006_add_app_s_and_nwk_s_keysSql,
	"0007_add_devaddr.sql": _0007_add_devaddrSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial.sql": &bintree{_0001_initialSql, map[string]*bintree{}},
	"0002_join_accept_params.sql": &bintree{_0002_join_accept_paramsSql, map[string]*bintree{}},
	"0003_rx_window_and_rx2_dr.sql": &bintree{_0003_rx_window_and_rx2_drSql, map[string]*bintree{}},
	"0004_remove_application_table.sql": &bintree{_0004_remove_application_tableSql, map[string]*bintree{}},
	"0005_add_queue.sql": &bintree{_0005_add_queueSql, map[string]*bintree{}},
	"0006_add_app_s_and_nwk_s_keys.sql": &bintree{_0006_add_app_s_and_nwk_s_keysSql, map[string]*bintree{}},
	"0007_add_devaddr.sql": &bintree{_0007_add_devaddrSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

